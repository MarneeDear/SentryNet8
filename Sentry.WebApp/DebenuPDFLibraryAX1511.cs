// Foxit Quick PDF Library
// ActiveX Edition
// Version 15.11

// Copyright © 1999 - 2018 Debenu Pty Ltd, Foxit Software

// DebenuPDFLibraryAX1511.cs
// C# import header for .NET
// This file was generated by an automated process on 26 March 2018
// http://www.debenu.com/

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace DebenuPDFLibraryAX1511
{

    public class PDFLibrary
    {
        private object comObject;
        private Type comType;

        public PDFLibrary()
        {
            comType = null;
            if (IntPtr.Size == 4)
            {
                comType = Type.GetTypeFromProgID("DebenuPDFLibraryAX1511.PDFLibrary");
            }
            if (IntPtr.Size == 8)
            {
                comType = Type.GetTypeFromProgID("DebenuPDFLibrary64AX1511.PDFLibrary");
            }
            if (comType != null)
                comObject = Activator.CreateInstance(comType);
        }

        public bool LibraryLoaded()
        {
            return comType != null;
        }

        public void ReleaseLibrary()
        {
            comType = null;
        }

        public int AddArcToPath(double CenterX, double CenterY, 
            double TotalAngle)
        {
            return (int)comType.InvokeMember("AddArcToPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CenterX, CenterY, TotalAngle});
        }

        public int AddBoxToPath(double Left, double Top, double Width, 
            double Height)
        {
            return (int)comType.InvokeMember("AddBoxToPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int AddCJKFont(int CJKFontID)
        {
            return (int)comType.InvokeMember("AddCJKFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CJKFontID});
        }

        public int AddCurveToPath(double CtAX, double CtAY, double CtBX, 
            double CtBY, double EndX, double EndY)
        {
            return (int)comType.InvokeMember("AddCurveToPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CtAX, CtAY, CtBX, CtBY, EndX, EndY});
        }

        public int AddEmbeddedFile(string FileName, string MIMEType)
        {
            return (int)comType.InvokeMember("AddEmbeddedFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, MIMEType});
        }

        public int AddFileAttachment(string Title, int EmbeddedFileID)
        {
            return (int)comType.InvokeMember("AddFileAttachment",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title, EmbeddedFileID});
        }

        public int AddFormFieldChoiceSub(int Index, string SubName, 
            string DisplayName)
        {
            return (int)comType.InvokeMember("AddFormFieldChoiceSub",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubName, DisplayName});
        }

        public int AddFormFieldSub(int Index, string SubName)
        {
            return (int)comType.InvokeMember("AddFormFieldSub",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubName});
        }

        public int AddFormFieldSubEx(int Index, string SubName, int Options)
        {
            return (int)comType.InvokeMember("AddFormFieldSubEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubName, Options});
        }

        public int AddFormFont(int FontID)
        {
            return (int)comType.InvokeMember("AddFormFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontID});
        }

        public int AddFreeTextAnnotation(double Left, double Top, 
            double Width, double Height, string Text, int Angle, 
            int Options)
        {
            return (int)comType.InvokeMember("AddFreeTextAnnotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Text, Angle, Options});
        }

        public int AddFreeTextAnnotationEx(double Left, double Top, 
            double Width, double Height, string Text, int Angle, 
            int Options, int Transparency)
        {
            return (int)comType.InvokeMember("AddFreeTextAnnotationEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Text, Angle, Options, 
                Transparency});
        }

        public int AddGlobalJavaScript(string PackageName, 
            string JavaScript)
        {
            return (int)comType.InvokeMember("AddGlobalJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PackageName, JavaScript});
        }

        public int AddImageFromFile(string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddImageFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, Options});
        }

        public int AddImageFromFileOffset(string FileName, int Offset, 
            int DataLength, int Options)
        {
            return (int)comType.InvokeMember("AddImageFromFileOffset",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, Offset, DataLength, Options});
        }

        public int AddImageFromVariant(byte[] SourceData, int Options)
        {
            return (int)comType.InvokeMember("AddImageFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SourceData, Options});
        }

        public int AddLGIDictToPage(string DictContent)
        {
            return (int)comType.InvokeMember("AddLGIDictToPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DictContent});
        }

        public int AddLineToPath(double EndX, double EndY)
        {
            return (int)comType.InvokeMember("AddLineToPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                EndX, EndY});
        }

        public int AddLinkToDestination(double Left, double Top, 
            double Width, double Height, int DestID, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, DestID, Options});
        }

        public int AddLinkToEmbeddedFile(double Left, double Top, 
            double Width, double Height, int EmbeddedFileID, string Title, 
            string Contents, int IconType, int Transpareny)
        {
            return (int)comType.InvokeMember("AddLinkToEmbeddedFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, EmbeddedFileID, Title, Contents, 
                IconType, Transpareny});
        }

        public int AddLinkToFile(double Left, double Top, double Width, 
            double Height, string FileName, int Page, double Position, 
            int NewWindow, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Page, Position, 
                NewWindow, Options});
        }

        public int AddLinkToFileDest(double Left, double Top, 
            double Width, double Height, string FileName, 
            string NamedDest, double Position, int NewWindow, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToFileDest",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, NamedDest, Position, 
                NewWindow, Options});
        }

        public int AddLinkToFileEx(double Left, double Top, double Width, 
            double Height, string FileName, int DestPage, int NewWindow, 
            int Options, int Zoom, int DestType, double DestLeft, 
            double DestTop, double DestRight, double DestBottom)
        {
            return (int)comType.InvokeMember("AddLinkToFileEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, DestPage, NewWindow, 
                Options, Zoom, DestType, DestLeft, DestTop, DestRight, 
                DestBottom});
        }

        public int AddLinkToJavaScript(double Left, double Top, 
            double Width, double Height, string JavaScript, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, JavaScript, Options});
        }

        public int AddLinkToLocalFile(double Left, double Top, 
            double Width, double Height, string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToLocalFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Options});
        }

        public int AddLinkToPage(double Left, double Top, double Width, 
            double Height, int Page, double Position, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Page, Position, Options});
        }

        public int AddLinkToWeb(double Left, double Top, double Width, 
            double Height, string Link, int Options)
        {
            return (int)comType.InvokeMember("AddLinkToWeb",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Link, Options});
        }

        public int AddNoteAnnotation(double Left, double Top, 
            int AnnotType, double PopupLeft, double PopupTop, 
            double PopupWidth, double PopupHeight, string Title, 
            string Contents, double Red, double Green, double Blue, 
            int Open)
        {
            return (int)comType.InvokeMember("AddNoteAnnotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, AnnotType, PopupLeft, PopupTop, PopupWidth, 
                PopupHeight, Title, Contents, Red, Green, Blue, Open});
        }

        public int AddOpenTypeFontFromFile(string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddOpenTypeFontFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, Options});
        }

        public int AddOpenTypeFontFromString(string Source, int Options)
        {
            return (int)comType.InvokeMember("AddOpenTypeFontFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source, Options});
        }

        public int AddPageLabels(int Start, int Style, int Offset, 
            string Prefix)
        {
            return (int)comType.InvokeMember("AddPageLabels",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Start, Style, Offset, Prefix});
        }

        public int AddPageMatrix(double xscale, double yscale, 
            double xoffset, double yoffset)
        {
            return (int)comType.InvokeMember("AddPageMatrix",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                xscale, yscale, xoffset, yoffset});
        }

        public int AddRGBSeparationColor(string ColorName, double Red, 
            double Green, double Blue, int Options)
        {
            return (int)comType.InvokeMember("AddRGBSeparationColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, Red, Green, Blue, Options});
        }

        public int AddRelativeLinkToFile(double Left, double Top, 
            double Width, double Height, string FileName, int Page, 
            double Position, int NewWindow, int Options)
        {
            return (int)comType.InvokeMember("AddRelativeLinkToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Page, Position, 
                NewWindow, Options});
        }

        public int AddRelativeLinkToFileDest(double Left, double Top, 
            double Width, double Height, string FileName, 
            string NamedDest, double Position, int NewWindow, int Options)
        {
            return (int)comType.InvokeMember("AddRelativeLinkToFileDest",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, NamedDest, Position, 
                NewWindow, Options});
        }

        public int AddRelativeLinkToFileEx(double Left, double Top, 
            double Width, double Height, string FileName, int DestPage, 
            int NewWindow, int Options, int Zoom, int DestType, 
            double DestLeft, double DestTop, double DestRight, 
            double DestBottom)
        {
            return (int)comType.InvokeMember("AddRelativeLinkToFileEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, DestPage, NewWindow, 
                Options, Zoom, DestType, DestLeft, DestTop, DestRight, 
                DestBottom});
        }

        public int AddRelativeLinkToLocalFile(double Left, double Top, 
            double Width, double Height, string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddRelativeLinkToLocalFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Options});
        }

        public int AddSVGAnnotationFromFile(double Left, double Top, 
            double Width, double Height, string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddSVGAnnotationFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Options});
        }

        public int AddSWFAnnotationFromFile(double Left, double Top, 
            double Width, double Height, string FileName, string Title, 
            int Options)
        {
            return (int)comType.InvokeMember("AddSWFAnnotationFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Title, Options});
        }

        public int AddSeparationColor(string ColorName, double C, 
            double M, double Y, double K, int Options)
        {
            return (int)comType.InvokeMember("AddSeparationColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, C, M, Y, K, Options});
        }

        public int AddSignProcessOverlayText(int SignProcessID, 
            double XPos, double YPos, double TextSize, string LayerName, 
            string OverlayText)
        {
            return (int)comType.InvokeMember("AddSignProcessOverlayText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, XPos, YPos, TextSize, LayerName, OverlayText});
        }

        public int AddStampAnnotation(double Left, double Top, 
            double Width, double Height, int StampType, string Title, 
            string Contents, double Red, double Green, double Blue, 
            int Options)
        {
            return (int)comType.InvokeMember("AddStampAnnotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, StampType, Title, Contents, Red, 
                Green, Blue, Options});
        }

        public int AddStampAnnotationFromImage(double Left, double Top, 
            double Width, double Height, string FileName, string Title, 
            string Contents, double Red, double Green, double Blue, 
            int Options)
        {
            return (int)comType.InvokeMember("AddStampAnnotationFromImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Title, Contents, Red, 
                Green, Blue, Options});
        }

        public int AddStampAnnotationFromImageID(double Left, double Top, 
            double Width, double Height, int ImageID, string Title, 
            string Contents, double Red, double Green, double Blue, 
            int Options)
        {
            return (int)comType.InvokeMember("AddStampAnnotationFromImageID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, ImageID, Title, Contents, Red, 
                Green, Blue, Options});
        }

        public int AddStandardFont(int StandardFontID)
        {
            return (int)comType.InvokeMember("AddStandardFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StandardFontID});
        }

        public int AddSubsettedFont(string FontName, int CharsetIndex, 
            string SubsetChars)
        {
            return (int)comType.InvokeMember("AddSubsettedFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontName, CharsetIndex, SubsetChars});
        }

        public int AddTextMarkupAnnotation(int MarkupType, double Left, 
            double Top, double Width, double Height)
        {
            return (int)comType.InvokeMember("AddTextMarkupAnnotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MarkupType, Left, Top, Width, Height});
        }

        public int AddToFileList(string ListName, string FileName)
        {
            return (int)comType.InvokeMember("AddToFileList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ListName, FileName});
        }

        public int AddToUnicodeFontGroup(string FontGroupName, int FontID)
        {
            return (int)comType.InvokeMember("AddToUnicodeFontGroup",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontGroupName, FontID});
        }

        public int AddTrueTypeFont(string FontName, int Embed)
        {
            return (int)comType.InvokeMember("AddTrueTypeFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontName, Embed});
        }

        public int AddTrueTypeFontFromFile(string FileName)
        {
            return (int)comType.InvokeMember("AddTrueTypeFontFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int AddTrueTypeFontFromFileEx(string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddTrueTypeFontFromFileEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, Options});
        }

        public int AddTrueTypeFontFromString(string Source)
        {
            return (int)comType.InvokeMember("AddTrueTypeFontFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source});
        }

        public int AddTrueTypeSubsettedFont(string FontName, 
            string SubsetChars, int Options)
        {
            return (int)comType.InvokeMember("AddTrueTypeSubsettedFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontName, SubsetChars, Options});
        }

        public int AddTrueTypeSubsettedFontFromFile(string FileName, 
            string SubsetChars, int Options)
        {
            return (int)comType.InvokeMember("AddTrueTypeSubsettedFontFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, SubsetChars, Options});
        }

        public int AddTrueTypeSubsettedFontFromString(string Source, 
            string SubsetChars, int Options)
        {
            return (int)comType.InvokeMember("AddTrueTypeSubsettedFontFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source, SubsetChars, Options});
        }

        public int AddType1Font(string FileName)
        {
            return (int)comType.InvokeMember("AddType1Font",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int AddU3DAnnotationFromFile(double Left, double Top, 
            double Width, double Height, string FileName, int Options)
        {
            return (int)comType.InvokeMember("AddU3DAnnotationFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, FileName, Options});
        }

        public int AddUnicodeFont(string FontName, int EncodingOptions, 
            int EmbedOptions)
        {
            return (int)comType.InvokeMember("AddUnicodeFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontName, EncodingOptions, EmbedOptions});
        }

        public int AddUnicodeFontFromFile(string FontFileName, 
            int EncodingOptions, int EmbedOptions)
        {
            return (int)comType.InvokeMember("AddUnicodeFontFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontFileName, EncodingOptions, EmbedOptions});
        }

        public int AnalyseFile(string InputFileName, string Password)
        {
            return (int)comType.InvokeMember("AnalyseFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password});
        }

        public int AnnotationCount()
        {
            return (int)comType.InvokeMember("AnnotationCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int AppendSpace(double RelativeSpace)
        {
            return (int)comType.InvokeMember("AppendSpace",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                RelativeSpace});
        }

        public int AppendTableColumns(int TableID, int NewColumnCount)
        {
            return (int)comType.InvokeMember("AppendTableColumns",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, NewColumnCount});
        }

        public int AppendTableRows(int TableID, int NewRowCount)
        {
            return (int)comType.InvokeMember("AppendTableRows",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, NewRowCount});
        }

        public int AppendText(string Text)
        {
            return (int)comType.InvokeMember("AppendText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Text});
        }

        public int AppendToFile(string FileName)
        {
            return (int)comType.InvokeMember("AppendToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public byte[] AppendToVariant(int AppendMode)
        {
            return (byte[])comType.InvokeMember("AppendToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                AppendMode});
        }

        public int ApplyStyle(string StyleName)
        {
            return (int)comType.InvokeMember("ApplyStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StyleName});
        }

        public int AttachAnnotToForm(int Index)
        {
            return (int)comType.InvokeMember("AttachAnnotToForm",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int BalanceContentStream()
        {
            return (int)comType.InvokeMember("BalanceContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int BalancePageTree(int Options)
        {
            return (int)comType.InvokeMember("BalancePageTree",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public int BeginPageUpdate()
        {
            return (int)comType.InvokeMember("BeginPageUpdate",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CapturePage(int Page)
        {
            return (int)comType.InvokeMember("CapturePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Page});
        }

        public int CapturePageEx(int Page, int Options)
        {
            return (int)comType.InvokeMember("CapturePageEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Page, Options});
        }

        public int CharWidth(int CharCode)
        {
            return (int)comType.InvokeMember("CharWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CharCode});
        }

        public int CheckFileCompliance(string InputFileName, 
            string Password, int ComplianceTest, int Options)
        {
            return (int)comType.InvokeMember("CheckFileCompliance",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, ComplianceTest, Options});
        }

        public int CheckObjects()
        {
            return (int)comType.InvokeMember("CheckObjects",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CheckPageAnnots()
        {
            return (int)comType.InvokeMember("CheckPageAnnots",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CheckPassword(string Password)
        {
            return (int)comType.InvokeMember("CheckPassword",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Password});
        }

        public int ClearFileList(string ListName)
        {
            return (int)comType.InvokeMember("ClearFileList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ListName});
        }

        public int ClearImage(int ImageID)
        {
            return (int)comType.InvokeMember("ClearImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageID});
        }

        public int ClearPageLabels()
        {
            return (int)comType.InvokeMember("ClearPageLabels",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ClearTextFormatting()
        {
            return (int)comType.InvokeMember("ClearTextFormatting",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CloneOutlineAction(int OutlineID)
        {
            return (int)comType.InvokeMember("CloneOutlineAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int ClonePages(int StartPage, int EndPage, int RepeatCount)
        {
            return (int)comType.InvokeMember("ClonePages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StartPage, EndPage, RepeatCount});
        }

        public int CloseOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("CloseOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int ClosePath()
        {
            return (int)comType.InvokeMember("ClosePath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CombineContentStreams()
        {
            return (int)comType.InvokeMember("CombineContentStreams",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CompareOutlines(int FirstOutlineID, int SecondOutlineID)
        {
            return (int)comType.InvokeMember("CompareOutlines",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FirstOutlineID, SecondOutlineID});
        }

        public int CompressContent()
        {
            return (int)comType.InvokeMember("CompressContent",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CompressFonts(int Compress)
        {
            return (int)comType.InvokeMember("CompressFonts",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Compress});
        }

        public int CompressImages(int Compress)
        {
            return (int)comType.InvokeMember("CompressImages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Compress});
        }

        public int CompressPage()
        {
            return (int)comType.InvokeMember("CompressPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ContentStreamCount()
        {
            return (int)comType.InvokeMember("ContentStreamCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ContentStreamSafe()
        {
            return (int)comType.InvokeMember("ContentStreamSafe",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CopyPageRanges(int DocumentID, string RangeList)
        {
            return (int)comType.InvokeMember("CopyPageRanges",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DocumentID, RangeList});
        }

        public int CopyPageRangesEx(int DocumentID, string RangeList, 
            int Options)
        {
            return (int)comType.InvokeMember("CopyPageRangesEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DocumentID, RangeList, Options});
        }

        public int CreateNewObject()
        {
            return (int)comType.InvokeMember("CreateNewObject",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CreateRenderer()
        {
            return (int)comType.InvokeMember("CreateRenderer",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int CreateTable(int RowCount, int ColumnCount)
        {
            return (int)comType.InvokeMember("CreateTable",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                RowCount, ColumnCount});
        }

        public int DAAppendFile(int FileHandle)
        {
            return (int)comType.InvokeMember("DAAppendFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public int DACapturePage(int FileHandle, int PageRef)
        {
            return (int)comType.InvokeMember("DACapturePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DACapturePageEx(int FileHandle, int PageRef, int Options)
        {
            return (int)comType.InvokeMember("DACapturePageEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, Options});
        }

        public int DACloseFile(int FileHandle)
        {
            return (int)comType.InvokeMember("DACloseFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public int DADrawCapturedPage(int FileHandle, int DACaptureID, 
            int DestPageRef, double PntLeft, double PntBottom, 
            double PntWidth, double PntHeight)
        {
            return (int)comType.InvokeMember("DADrawCapturedPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, DACaptureID, DestPageRef, PntLeft, PntBottom, 
                PntWidth, PntHeight});
        }

        public int DADrawRotatedCapturedPage(int FileHandle, 
            int DACaptureID, int DestPageRef, double PntLeft, 
            double PntBottom, double PntWidth, double PntHeight, 
            double Angle)
        {
            return (int)comType.InvokeMember("DADrawRotatedCapturedPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, DACaptureID, DestPageRef, PntLeft, PntBottom, 
                PntWidth, PntHeight, Angle});
        }

        public int DAEmbedFileStreams(int FileHandle, string RootPath)
        {
            return (int)comType.InvokeMember("DAEmbedFileStreams",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, RootPath});
        }

        public string DAExtractPageText(int FileHandle, int PageRef, 
            int Options)
        {
            return Convert.ToString(comType.InvokeMember("DAExtractPageText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, Options}));
        }

        public int DAExtractPageTextBlocks(int FileHandle, int PageRef, 
            int ExtractOptions)
        {
            return (int)comType.InvokeMember("DAExtractPageTextBlocks",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, ExtractOptions});
        }

        public int DAFindPage(int FileHandle, int Page)
        {
            return (int)comType.InvokeMember("DAFindPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, Page});
        }

        public int DAGetAnnotationCount(int FileHandle, int PageRef)
        {
            return (int)comType.InvokeMember("DAGetAnnotationCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DAGetFormFieldCount(int FileHandle)
        {
            return (int)comType.InvokeMember("DAGetFormFieldCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public string DAGetFormFieldTitle(int FileHandle, int FieldIndex)
        {
            return Convert.ToString(comType.InvokeMember("DAGetFormFieldTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, FieldIndex}));
        }

        public string DAGetFormFieldValue(int FileHandle, int FieldIndex)
        {
            return Convert.ToString(comType.InvokeMember("DAGetFormFieldValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, FieldIndex}));
        }

        public byte[] DAGetImageDataToVariant(int FileHandle, 
            int ImageListID, int ImageIndex)
        {
            return (byte[])comType.InvokeMember("DAGetImageDataToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ImageListID, ImageIndex});
        }

        public double DAGetImageDblProperty(int FileHandle, 
            int ImageListID, int ImageIndex, int PropertyID)
        {
            return (double)comType.InvokeMember("DAGetImageDblProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ImageListID, ImageIndex, PropertyID});
        }

        public int DAGetImageIntProperty(int FileHandle, int ImageListID, 
            int ImageIndex, int PropertyID)
        {
            return (int)comType.InvokeMember("DAGetImageIntProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ImageListID, ImageIndex, PropertyID});
        }

        public int DAGetImageListCount(int FileHandle, int ImageListID)
        {
            return (int)comType.InvokeMember("DAGetImageListCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ImageListID});
        }

        public string DAGetInformation(int FileHandle, string Key)
        {
            return Convert.ToString(comType.InvokeMember("DAGetInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, Key}));
        }

        public int DAGetObjectCount(int FileHandle)
        {
            return (int)comType.InvokeMember("DAGetObjectCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public byte[] DAGetObjectToVariant(int FileHandle, int ObjectNumber)
        {
            return (byte[])comType.InvokeMember("DAGetObjectToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ObjectNumber});
        }

        public double DAGetPageBox(int FileHandle, int PageRef, 
            int BoxIndex, int Dimension)
        {
            return (double)comType.InvokeMember("DAGetPageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, BoxIndex, Dimension});
        }

        public byte[] DAGetPageContentToVariant(int FileHandle, int PageRef)
        {
            return (byte[])comType.InvokeMember("DAGetPageContentToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DAGetPageCount(int FileHandle)
        {
            return (int)comType.InvokeMember("DAGetPageCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public double DAGetPageHeight(int FileHandle, int PageRef)
        {
            return (double)comType.InvokeMember("DAGetPageHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DAGetPageImageList(int FileHandle, int PageRef)
        {
            return (int)comType.InvokeMember("DAGetPageImageList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DAGetPageLayout(int FileHandle)
        {
            return (int)comType.InvokeMember("DAGetPageLayout",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public int DAGetPageMode(int FileHandle)
        {
            return (int)comType.InvokeMember("DAGetPageMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public double DAGetPageWidth(int FileHandle, int PageRef)
        {
            return (double)comType.InvokeMember("DAGetPageWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public string DAGetTextBlockAsString(int TextBlockListID, int Index)
        {
            return Convert.ToString(comType.InvokeMember("DAGetTextBlockAsString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index}));
        }

        public double DAGetTextBlockBound(int TextBlockListID, int Index, 
            int BoundIndex)
        {
            return (double)comType.InvokeMember("DAGetTextBlockBound",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index, BoundIndex});
        }

        public double DAGetTextBlockCharWidth(int TextBlockListID, 
            int Index, int CharIndex)
        {
            return (double)comType.InvokeMember("DAGetTextBlockCharWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index, CharIndex});
        }

        public double DAGetTextBlockColor(int TextBlockListID, int Index, 
            int ColorComponent)
        {
            return (double)comType.InvokeMember("DAGetTextBlockColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index, ColorComponent});
        }

        public int DAGetTextBlockColorType(int TextBlockListID, int Index)
        {
            return (int)comType.InvokeMember("DAGetTextBlockColorType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index});
        }

        public int DAGetTextBlockCount(int TextBlockListID)
        {
            return (int)comType.InvokeMember("DAGetTextBlockCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID});
        }

        public string DAGetTextBlockFontName(int TextBlockListID, int Index)
        {
            return Convert.ToString(comType.InvokeMember("DAGetTextBlockFontName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index}));
        }

        public double DAGetTextBlockFontSize(int TextBlockListID, int Index)
        {
            return (double)comType.InvokeMember("DAGetTextBlockFontSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index});
        }

        public string DAGetTextBlockText(int TextBlockListID, int Index)
        {
            return Convert.ToString(comType.InvokeMember("DAGetTextBlockText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index}));
        }

        public int DAHasPageBox(int FileHandle, int PageRef, int BoxIndex)
        {
            return (int)comType.InvokeMember("DAHasPageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, BoxIndex});
        }

        public int DAHidePage(int FileHandle, int PageRef)
        {
            return (int)comType.InvokeMember("DAHidePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DAMovePage(int FileHandle, int PageRef, 
            int TargetPageRef, int Options)
        {
            return (int)comType.InvokeMember("DAMovePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, TargetPageRef, Options});
        }

        public int DANewPage(int FileHandle)
        {
            return (int)comType.InvokeMember("DANewPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public int DANewPages(int FileHandle, int PageCount)
        {
            return (int)comType.InvokeMember("DANewPages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageCount});
        }

        public int DANormalizePage(int FileHandle, int PageRef, 
            int NormalizeOptions)
        {
            return (int)comType.InvokeMember("DANormalizePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, NormalizeOptions});
        }

        public int DAOpenFile(string InputFileName, string Password)
        {
            return (int)comType.InvokeMember("DAOpenFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password});
        }

        public int DAOpenFileReadOnly(string InputFileName, string Password)
        {
            return (int)comType.InvokeMember("DAOpenFileReadOnly",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password});
        }

        public int DAPageRotation(int FileHandle, int PageRef)
        {
            return (int)comType.InvokeMember("DAPageRotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef});
        }

        public int DAReleaseImageList(int FileHandle, int ImageListID)
        {
            return (int)comType.InvokeMember("DAReleaseImageList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ImageListID});
        }

        public int DAReleaseTextBlocks(int TextBlockListID)
        {
            return (int)comType.InvokeMember("DAReleaseTextBlocks",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID});
        }

        public int DARemoveUsageRights(int FileHandle)
        {
            return (int)comType.InvokeMember("DARemoveUsageRights",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public int DARenderPageToDC(int FileHandle, int PageRef, 
            double DPI, IntPtr DC)
        {
            return (int)comType.InvokeMember("DARenderPageToDC",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, DPI, DC});
        }

        public int DARenderPageToFile(int FileHandle, int PageRef, 
            int Options, double DPI, string FileName)
        {
            return (int)comType.InvokeMember("DARenderPageToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, Options, DPI, FileName});
        }

        public byte[] DARenderPageToVariant(int FileHandle, int PageRef, 
            int Options, double DPI)
        {
            return (byte[])comType.InvokeMember("DARenderPageToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, Options, DPI});
        }

        public int DARotatePage(int FileHandle, int PageRef, int Angle, 
            int Options)
        {
            return (int)comType.InvokeMember("DARotatePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, Angle, Options});
        }

        public int DASaveAsFile(int FileHandle, string OutputFileName)
        {
            return (int)comType.InvokeMember("DASaveAsFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, OutputFileName});
        }

        public int DASaveImageDataToFile(int FileHandle, int ImageListID, 
            int ImageIndex, string ImageFileName)
        {
            return (int)comType.InvokeMember("DASaveImageDataToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, ImageListID, ImageIndex, ImageFileName});
        }

        public int DASetInformation(int FileHandle, string Key, 
            string NewValue)
        {
            return (int)comType.InvokeMember("DASetInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, Key, NewValue});
        }

        public int DASetPageBox(int FileHandle, int PageRef, int BoxIndex, 
            double X1, double Y1, double X2, double Y2)
        {
            return (int)comType.InvokeMember("DASetPageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, BoxIndex, X1, Y1, X2, Y2});
        }

        public int DASetPageLayout(int FileHandle, int NewPageLayout)
        {
            return (int)comType.InvokeMember("DASetPageLayout",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, NewPageLayout});
        }

        public int DASetPageMode(int FileHandle, int NewPageMode)
        {
            return (int)comType.InvokeMember("DASetPageMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, NewPageMode});
        }

        public int DASetPageSize(int FileHandle, int PageRef, 
            double PntWidth, double PntHeight)
        {
            return (int)comType.InvokeMember("DASetPageSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle, PageRef, PntWidth, PntHeight});
        }

        public int DASetRenderArea(double Left, double Top, double Width, 
            double Height)
        {
            return (int)comType.InvokeMember("DASetRenderArea",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int DASetTextExtractionArea(double Left, double Top, 
            double Width, double Height)
        {
            return (int)comType.InvokeMember("DASetTextExtractionArea",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int DASetTextExtractionOptions(int OptionID, int NewValue)
        {
            return (int)comType.InvokeMember("DASetTextExtractionOptions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionID, NewValue});
        }

        public int DASetTextExtractionScaling(int Options, 
            double Horizontal, double Vertical)
        {
            return (int)comType.InvokeMember("DASetTextExtractionScaling",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options, Horizontal, Vertical});
        }

        public int DASetTextExtractionWordGap(double NewWordGap)
        {
            return (int)comType.InvokeMember("DASetTextExtractionWordGap",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewWordGap});
        }

        public int DAShiftedHeader(int FileHandle)
        {
            return (int)comType.InvokeMember("DAShiftedHeader",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileHandle});
        }

        public int Decrypt()
        {
            return (int)comType.InvokeMember("Decrypt",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int DecryptFile(string InputFileName, 
            string OutputFileName, string Password)
        {
            return (int)comType.InvokeMember("DecryptFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, OutputFileName, Password});
        }

        public int DeleteAnalysis(int AnalysisID)
        {
            return (int)comType.InvokeMember("DeleteAnalysis",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                AnalysisID});
        }

        public int DeleteAnnotation(int Index)
        {
            return (int)comType.InvokeMember("DeleteAnnotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int DeleteContentStream()
        {
            return (int)comType.InvokeMember("DeleteContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int DeleteFormField(int Index)
        {
            return (int)comType.InvokeMember("DeleteFormField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int DeleteOptionalContentGroup(int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("DeleteOptionalContentGroup",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID});
        }

        public int DeletePageLGIDict(int DictIndex)
        {
            return (int)comType.InvokeMember("DeletePageLGIDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DictIndex});
        }

        public int DeletePages(int StartPage, int PageCount)
        {
            return (int)comType.InvokeMember("DeletePages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StartPage, PageCount});
        }

        public int DestroyRenderer()
        {
            return (int)comType.InvokeMember("DestroyRenderer",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int DocJavaScriptAction(string ActionType, string JavaScript)
        {
            return (int)comType.InvokeMember("DocJavaScriptAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionType, JavaScript});
        }

        public int DocumentCount()
        {
            return (int)comType.InvokeMember("DocumentCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int DrawArc(double XPos, double YPos, double Radius, 
            double StartAngle, double EndAngle, int Pie, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawArc",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Radius, StartAngle, EndAngle, Pie, DrawOptions});
        }

        public int DrawBarcode(double Left, double Top, double Width, 
            double Height, string Text, int Barcode, int Options)
        {
            return (int)comType.InvokeMember("DrawBarcode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Text, Barcode, Options});
        }

        public int DrawBox(double Left, double Top, double Width, 
            double Height, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, DrawOptions});
        }

        public int DrawCapturedPage(int CaptureID, double Left, 
            double Top, double Width, double Height)
        {
            return (int)comType.InvokeMember("DrawCapturedPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CaptureID, Left, Top, Width, Height});
        }

        public int DrawCapturedPageMatrix(int CaptureID, double M11, 
            double M12, double M21, double M22, double MDX, double MDY)
        {
            return (int)comType.InvokeMember("DrawCapturedPageMatrix",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CaptureID, M11, M12, M21, M22, MDX, MDY});
        }

        public int DrawCircle(double XPos, double YPos, double Radius, 
            int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawCircle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Radius, DrawOptions});
        }

        public int DrawDataMatrixSymbol(double Left, double Top, 
            double ModuleSize, string Text, int Encoding, int SymbolSize, 
            int Options)
        {
            return (int)comType.InvokeMember("DrawDataMatrixSymbol",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, ModuleSize, Text, Encoding, SymbolSize, Options});
        }

        public int DrawEllipse(double XPos, double YPos, double Width, 
            double Height, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawEllipse",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Width, Height, DrawOptions});
        }

        public int DrawEllipticArc(double XPos, double YPos, double Width, 
            double Height, double StartAngle, double EndAngle, int Pie, 
            int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawEllipticArc",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Width, Height, StartAngle, EndAngle, Pie, 
                DrawOptions});
        }

        public int DrawFontGroupText(string FontGroupName, double XPos, 
            double YPos, string Text)
        {
            return (int)comType.InvokeMember("DrawFontGroupText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontGroupName, XPos, YPos, Text});
        }

        public int DrawHTMLText(double Left, double Top, double Width, 
            string HTMLText)
        {
            return (int)comType.InvokeMember("DrawHTMLText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, HTMLText});
        }

        public string DrawHTMLTextBox(double Left, double Top, 
            double Width, double Height, string HTMLText)
        {
            return Convert.ToString(comType.InvokeMember("DrawHTMLTextBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, HTMLText}));
        }

        public string DrawHTMLTextBoxMatrix(double Width, double Height, 
            string HTMLText, double M11, double M12, double M21, 
            double M22, double MDX, double MDY)
        {
            return Convert.ToString(comType.InvokeMember("DrawHTMLTextBoxMatrix",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, Height, HTMLText, M11, M12, M21, M22, MDX, MDY}));
        }

        public int DrawHTMLTextMatrix(double Width, string HTMLText, 
            double M11, double M12, double M21, double M22, double MDX, 
            double MDY)
        {
            return (int)comType.InvokeMember("DrawHTMLTextMatrix",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, HTMLText, M11, M12, M21, M22, MDX, MDY});
        }

        public int DrawImage(double Left, double Top, double Width, 
            double Height)
        {
            return (int)comType.InvokeMember("DrawImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int DrawImageMatrix(double M11, double M12, double M21, 
            double M22, double MDX, double MDY)
        {
            return (int)comType.InvokeMember("DrawImageMatrix",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                M11, M12, M21, M22, MDX, MDY});
        }

        public int DrawIntelligentMailBarcode(double Left, double Top, 
            double BarWidth, double FullBarHeight, double TrackerHeight, 
            double SpaceWidth, string BarcodeData, int Options)
        {
            return (int)comType.InvokeMember("DrawIntelligentMailBarcode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, BarWidth, FullBarHeight, TrackerHeight, 
                SpaceWidth, BarcodeData, Options});
        }

        public int DrawLine(double StartX, double StartY, double EndX, 
            double EndY)
        {
            return (int)comType.InvokeMember("DrawLine",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StartX, StartY, EndX, EndY});
        }

        public int DrawMultiLineText(double XPos, double YPos, 
            string Delimiter, string Text)
        {
            return (int)comType.InvokeMember("DrawMultiLineText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Delimiter, Text});
        }

        public int DrawPDF417Symbol(double Left, double Top, string Text, 
            int Options)
        {
            return (int)comType.InvokeMember("DrawPDF417Symbol",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Text, Options});
        }

        public int DrawPDF417SymbolEx(double Left, double Top, 
            string Text, int Options, int FixedColumns, int FixedRows, 
            int ErrorLevel, double ModuleSize, double HeightWidthRatio)
        {
            return (int)comType.InvokeMember("DrawPDF417SymbolEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Text, Options, FixedColumns, FixedRows, 
                ErrorLevel, ModuleSize, HeightWidthRatio});
        }

        public int DrawPath(int PathOptions)
        {
            return (int)comType.InvokeMember("DrawPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PathOptions});
        }

        public int DrawPathEvenOdd(int PathOptions)
        {
            return (int)comType.InvokeMember("DrawPathEvenOdd",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PathOptions});
        }

        public int DrawPostScriptXObject(int PSRef)
        {
            return (int)comType.InvokeMember("DrawPostScriptXObject",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PSRef});
        }

        public int DrawQRCode(double Left, double Top, double SymbolSize, 
            string Text, int EncodeOptions, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawQRCode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, SymbolSize, Text, EncodeOptions, DrawOptions});
        }

        public int DrawRotatedBox(double Left, double Bottom, 
            double Width, double Height, double Angle, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawRotatedBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Bottom, Width, Height, Angle, DrawOptions});
        }

        public int DrawRotatedCapturedPage(int CaptureID, double Left, 
            double Bottom, double Width, double Height, double Angle)
        {
            return (int)comType.InvokeMember("DrawRotatedCapturedPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CaptureID, Left, Bottom, Width, Height, Angle});
        }

        public int DrawRotatedImage(double Left, double Bottom, 
            double Width, double Height, double Angle)
        {
            return (int)comType.InvokeMember("DrawRotatedImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Bottom, Width, Height, Angle});
        }

        public int DrawRotatedMultiLineText(double XPos, double YPos, 
            double Angle, string Delimiter, string Text)
        {
            return (int)comType.InvokeMember("DrawRotatedMultiLineText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Angle, Delimiter, Text});
        }

        public int DrawRotatedText(double XPos, double YPos, double Angle, 
            string Text)
        {
            return (int)comType.InvokeMember("DrawRotatedText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Angle, Text});
        }

        public int DrawRotatedTextBox(double Left, double Top, 
            double Width, double Height, double Angle, string Text, 
            int Options)
        {
            return (int)comType.InvokeMember("DrawRotatedTextBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Angle, Text, Options});
        }

        public int DrawRotatedTextBoxEx(double Left, double Top, 
            double Width, double Height, double Angle, string Text, 
            int Options, int Border, int Radius, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawRotatedTextBoxEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Angle, Text, Options, Border, 
                Radius, DrawOptions});
        }

        public int DrawRoundedBox(double Left, double Top, double Width, 
            double Height, double Radius, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawRoundedBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Radius, DrawOptions});
        }

        public int DrawRoundedRotatedBox(double Left, double Bottom, 
            double Width, double Height, double Radius, double Angle, 
            int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawRoundedRotatedBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Bottom, Width, Height, Radius, Angle, DrawOptions});
        }

        public int DrawScaledImage(double Left, double Top, double Scale)
        {
            return (int)comType.InvokeMember("DrawScaledImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Scale});
        }

        public int DrawSpacedText(double XPos, double YPos, 
            double Spacing, string Text)
        {
            return (int)comType.InvokeMember("DrawSpacedText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Spacing, Text});
        }

        public double DrawTableRows(int TableID, double Left, double Top, 
            double Height, int FirstRow, int LastRow)
        {
            return (double)comType.InvokeMember("DrawTableRows",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, Left, Top, Height, FirstRow, LastRow});
        }

        public int DrawText(double XPos, double YPos, string Text)
        {
            return (int)comType.InvokeMember("DrawText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Text});
        }

        public int DrawTextArc(double XPos, double YPos, double Radius, 
            double Angle, string Text, int DrawOptions)
        {
            return (int)comType.InvokeMember("DrawTextArc",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Radius, Angle, Text, DrawOptions});
        }

        public int DrawTextBox(double Left, double Top, double Width, 
            double Height, string Text, int Options)
        {
            return (int)comType.InvokeMember("DrawTextBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Text, Options});
        }

        public int DrawTextBoxMatrix(double Width, double Height, 
            string Text, int Options, double M11, double M12, double M21, 
            double M22, double MDX, double MDY)
        {
            return (int)comType.InvokeMember("DrawTextBoxMatrix",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, Height, Text, Options, M11, M12, M21, M22, MDX, MDY});
        }

        public int DrawUniscribeText(double XPos, double YPos, 
            string Text, int Options)
        {
            return (int)comType.InvokeMember("DrawUniscribeText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Text, Options});
        }

        public int DrawWrappedText(double XPos, double YPos, double Width, 
            string Text)
        {
            return (int)comType.InvokeMember("DrawWrappedText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XPos, YPos, Width, Text});
        }

        public int EditableContentStream()
        {
            return (int)comType.InvokeMember("EditableContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EmbedFile(string Title, string FileName, string MIMEType)
        {
            return (int)comType.InvokeMember("EmbedFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title, FileName, MIMEType});
        }

        public int EmbedRelatedFile(string Title, string FileName, 
            string MIMEType, string AFRelationship, int Options)
        {
            return (int)comType.InvokeMember("EmbedRelatedFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title, FileName, MIMEType, AFRelationship, Options});
        }

        public int EmbeddedFileCount()
        {
            return (int)comType.InvokeMember("EmbeddedFileCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EncapsulateContentStream()
        {
            return (int)comType.InvokeMember("EncapsulateContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EncodePermissions(int CanPrint, int CanCopy, 
            int CanChange, int CanAddNotes, int CanFillFields, 
            int CanCopyAccess, int CanAssemble, int CanPrintFull)
        {
            return (int)comType.InvokeMember("EncodePermissions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CanPrint, CanCopy, CanChange, CanAddNotes, CanFillFields, 
                CanCopyAccess, CanAssemble, CanPrintFull});
        }

        public string EncodeStringFromVariant(byte[] NumberList, 
            string Encoding, int UnmatchedAction)
        {
            return Convert.ToString(comType.InvokeMember("EncodeStringFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NumberList, Encoding, UnmatchedAction}));
        }

        public int Encrypt(string Owner, string User, int Strength, 
            int Permissions)
        {
            return (int)comType.InvokeMember("Encrypt",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Owner, User, Strength, Permissions});
        }

        public int EncryptFile(string InputFileName, 
            string OutputFileName, string Owner, string User, 
            int Strength, int Permissions)
        {
            return (int)comType.InvokeMember("EncryptFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, OutputFileName, Owner, User, Strength, 
                Permissions});
        }

        public int EncryptWithFingerprint(string Fingerprint)
        {
            return (int)comType.InvokeMember("EncryptWithFingerprint",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Fingerprint});
        }

        public int EncryptionAlgorithm()
        {
            return (int)comType.InvokeMember("EncryptionAlgorithm",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EncryptionStatus()
        {
            return (int)comType.InvokeMember("EncryptionStatus",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EncryptionStrength()
        {
            return (int)comType.InvokeMember("EncryptionStrength",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EndPageUpdate()
        {
            return (int)comType.InvokeMember("EndPageUpdate",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int EndSignProcessToFile(int SignProcessID, 
            string OutputFile)
        {
            return (int)comType.InvokeMember("EndSignProcessToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, OutputFile});
        }

        public byte[] ExtractFilePageContentToVariant(
            string InputFileName, string Password, int Page)
        {
            return (byte[])comType.InvokeMember("ExtractFilePageContentToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, Page});
        }

        public string ExtractFilePageText(string InputFileName, 
            string Password, int Page, int Options)
        {
            return Convert.ToString(comType.InvokeMember("ExtractFilePageText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, Page, Options}));
        }

        public int ExtractFilePageTextBlocks(string InputFileName, 
            string Password, int Page, int Options)
        {
            return (int)comType.InvokeMember("ExtractFilePageTextBlocks",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, Page, Options});
        }

        public int ExtractFilePages(string InputFileName, string Password, 
            string OutputFileName, string RangeList)
        {
            return (int)comType.InvokeMember("ExtractFilePages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, OutputFileName, RangeList});
        }

        public int ExtractFilePagesEx(string InputFileName, 
            string Password, string OutputFileName, string RangeList, 
            int Options)
        {
            return (int)comType.InvokeMember("ExtractFilePagesEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, OutputFileName, RangeList, Options});
        }

        public int ExtractPageRanges(string RangeList)
        {
            return (int)comType.InvokeMember("ExtractPageRanges",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                RangeList});
        }

        public int ExtractPageTextBlocks(int ExtractOptions)
        {
            return (int)comType.InvokeMember("ExtractPageTextBlocks",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ExtractOptions});
        }

        public int ExtractPages(int StartPage, int PageCount)
        {
            return (int)comType.InvokeMember("ExtractPages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StartPage, PageCount});
        }

        public int FileListCount(string ListName)
        {
            return (int)comType.InvokeMember("FileListCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ListName});
        }

        public string FileListItem(string ListName, int Index)
        {
            return Convert.ToString(comType.InvokeMember("FileListItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ListName, Index}));
        }

        public int FindFonts()
        {
            return (int)comType.InvokeMember("FindFonts",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int FindFormFieldByTitle(string Title)
        {
            return (int)comType.InvokeMember("FindFormFieldByTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title});
        }

        public int FindImages()
        {
            return (int)comType.InvokeMember("FindImages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int FitImage(double Left, double Top, double Width, 
            double Height, int HAlign, int VAlign, int Rotate)
        {
            return (int)comType.InvokeMember("FitImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, HAlign, VAlign, Rotate});
        }

        public int FitRotatedTextBox(double Left, double Top, 
            double Width, double Height, double Angle, string Text, 
            int Options)
        {
            return (int)comType.InvokeMember("FitRotatedTextBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Angle, Text, Options});
        }

        public int FitTextBox(double Left, double Top, double Width, 
            double Height, string Text, int Options)
        {
            return (int)comType.InvokeMember("FitTextBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height, Text, Options});
        }

        public int FlattenAllFormFields(int Options)
        {
            return (int)comType.InvokeMember("FlattenAllFormFields",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public int FlattenAnnot(int Index, int Options)
        {
            return (int)comType.InvokeMember("FlattenAnnot",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Options});
        }

        public int FlattenFormField(int Index)
        {
            return (int)comType.InvokeMember("FlattenFormField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int FontCount()
        {
            return (int)comType.InvokeMember("FontCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string FontFamily()
        {
            return Convert.ToString(comType.InvokeMember("FontFamily",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int FontHasKerning()
        {
            return (int)comType.InvokeMember("FontHasKerning",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string FontName()
        {
            return Convert.ToString(comType.InvokeMember("FontName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public string FontReference()
        {
            return Convert.ToString(comType.InvokeMember("FontReference",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int FontSize()
        {
            return (int)comType.InvokeMember("FontSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int FontType()
        {
            return (int)comType.InvokeMember("FontType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int FormFieldCount()
        {
            return (int)comType.InvokeMember("FormFieldCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int FormFieldHasParent(int Index)
        {
            return (int)comType.InvokeMember("FormFieldHasParent",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int FormFieldJavaScriptAction(int Index, string ActionType, 
            string JavaScript)
        {
            return (int)comType.InvokeMember("FormFieldJavaScriptAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType, JavaScript});
        }

        public int FormFieldWebLinkAction(int Index, string ActionType, 
            string Link)
        {
            return (int)comType.InvokeMember("FormFieldWebLinkAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType, Link});
        }

        public int GetActionDest(int ActionID)
        {
            return (int)comType.InvokeMember("GetActionDest",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionID});
        }

        public string GetActionType(int ActionID)
        {
            return Convert.ToString(comType.InvokeMember("GetActionType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionID}));
        }

        public string GetActionURL(int ActionID)
        {
            return Convert.ToString(comType.InvokeMember("GetActionURL",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionID}));
        }

        public string GetAnalysisInfo(int AnalysisID, int AnalysisItem)
        {
            return Convert.ToString(comType.InvokeMember("GetAnalysisInfo",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                AnalysisID, AnalysisItem}));
        }

        public int GetAnnotActionID(int Index)
        {
            return (int)comType.InvokeMember("GetAnnotActionID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetAnnotDblProperty(int Index, int Tag)
        {
            return (double)comType.InvokeMember("GetAnnotDblProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag});
        }

        public int GetAnnotDest(int Index)
        {
            return (int)comType.InvokeMember("GetAnnotDest",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetAnnotEmbeddedFileName(int Index, int Options)
        {
            return Convert.ToString(comType.InvokeMember("GetAnnotEmbeddedFileName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Options}));
        }

        public int GetAnnotEmbeddedFileToFile(int Index, int Options, 
            string FileName)
        {
            return (int)comType.InvokeMember("GetAnnotEmbeddedFileToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Options, FileName});
        }

        public int GetAnnotIntProperty(int Index, int Tag)
        {
            return (int)comType.InvokeMember("GetAnnotIntProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag});
        }

        public int GetAnnotQuadCount(int Index)
        {
            return (int)comType.InvokeMember("GetAnnotQuadCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetAnnotQuadPoints(int Index, int QuadNumber, 
            int PointNumber)
        {
            return (double)comType.InvokeMember("GetAnnotQuadPoints",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, QuadNumber, PointNumber});
        }

        public int GetAnnotSoundToFile(int Index, int Options, 
            string SoundFileName)
        {
            return (int)comType.InvokeMember("GetAnnotSoundToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Options, SoundFileName});
        }

        public string GetAnnotStrProperty(int Index, int Tag)
        {
            return Convert.ToString(comType.InvokeMember("GetAnnotStrProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag}));
        }

        public double GetBarcodeWidth(double NominalWidth, string Text, 
            int Barcode)
        {
            return (double)comType.InvokeMember("GetBarcodeWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NominalWidth, Text, Barcode});
        }

        public string GetBaseURL()
        {
            return Convert.ToString(comType.InvokeMember("GetBaseURL",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int GetCSDictEPSG(int CSDictID)
        {
            return (int)comType.InvokeMember("GetCSDictEPSG",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CSDictID});
        }

        public int GetCSDictType(int CSDictID)
        {
            return (int)comType.InvokeMember("GetCSDictType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CSDictID});
        }

        public string GetCSDictWKT(int CSDictID)
        {
            return Convert.ToString(comType.InvokeMember("GetCSDictWKT",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CSDictID}));
        }

        public IntPtr GetCanvasDC(int CanvasWidth, int CanvasHeight)
        {
            return (IntPtr)comType.InvokeMember("GetCanvasDC",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CanvasWidth, CanvasHeight});
        }

        public int GetCanvasDCEx(int CanvasWidth, int CanvasHeight, 
            int ReferenceDC)
        {
            return (int)comType.InvokeMember("GetCanvasDCEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CanvasWidth, CanvasHeight, ReferenceDC});
        }

        public string GetCatalogInformation(string Key)
        {
            return Convert.ToString(comType.InvokeMember("GetCatalogInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key}));
        }

        public byte[] GetContentStreamToVariant()
        {
            return (byte[])comType.InvokeMember("GetContentStreamToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetCustomInformation(string Key)
        {
            return Convert.ToString(comType.InvokeMember("GetCustomInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key}));
        }

        public string GetCustomKeys(int Location)
        {
            return Convert.ToString(comType.InvokeMember("GetCustomKeys",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Location}));
        }

        public string GetDefaultPrinterName()
        {
            return Convert.ToString(comType.InvokeMember("GetDefaultPrinterName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public string GetDestName(int DestID)
        {
            return Convert.ToString(comType.InvokeMember("GetDestName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestID}));
        }

        public int GetDestPage(int DestID)
        {
            return (int)comType.InvokeMember("GetDestPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestID});
        }

        public int GetDestType(int DestID)
        {
            return (int)comType.InvokeMember("GetDestType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestID});
        }

        public double GetDestValue(int DestID, int ValueKey)
        {
            return (double)comType.InvokeMember("GetDestValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestID, ValueKey});
        }

        public string GetDocJavaScript(string ActionType)
        {
            return Convert.ToString(comType.InvokeMember("GetDocJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionType}));
        }

        public string GetDocumentFileName()
        {
            return Convert.ToString(comType.InvokeMember("GetDocumentFileName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int GetDocumentFileSize()
        {
            return (int)comType.InvokeMember("GetDocumentFileSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetDocumentID(int Index)
        {
            return (int)comType.InvokeMember("GetDocumentID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetDocumentIdentifier(int Part, int Options)
        {
            return Convert.ToString(comType.InvokeMember("GetDocumentIdentifier",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Part, Options}));
        }

        public string GetDocumentMetadata()
        {
            return Convert.ToString(comType.InvokeMember("GetDocumentMetadata",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int GetDocumentRepaired()
        {
            return (int)comType.InvokeMember("GetDocumentRepaired",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetDocumentResourceList()
        {
            return Convert.ToString(comType.InvokeMember("GetDocumentResourceList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int GetEmbeddedFileContentToFile(int Index, string FileName)
        {
            return (int)comType.InvokeMember("GetEmbeddedFileContentToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, FileName});
        }

        public byte[] GetEmbeddedFileContentToVariant(int Index)
        {
            return (byte[])comType.InvokeMember("GetEmbeddedFileContentToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetEmbeddedFileID(int Index)
        {
            return (int)comType.InvokeMember("GetEmbeddedFileID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetEmbeddedFileIntProperty(int Index, int Tag)
        {
            return (int)comType.InvokeMember("GetEmbeddedFileIntProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag});
        }

        public string GetEmbeddedFileStrProperty(int Index, int Tag)
        {
            return Convert.ToString(comType.InvokeMember("GetEmbeddedFileStrProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag}));
        }

        public string GetEncryptionFingerprint()
        {
            return Convert.ToString(comType.InvokeMember("GetEncryptionFingerprint",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public string GetFileMetadata(string InputFileName, string Password)
        {
            return Convert.ToString(comType.InvokeMember("GetFileMetadata",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password}));
        }

        public int GetFirstChildOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("GetFirstChildOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int GetFirstOutline()
        {
            return (int)comType.InvokeMember("GetFirstOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public byte[] GetFontCharacterCodesToVariant(string InputText)
        {
            return (byte[])comType.InvokeMember("GetFontCharacterCodesToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputText});
        }

        public int GetFontEncoding()
        {
            return (int)comType.InvokeMember("GetFontEncoding",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetFontFlags(int FontFlagItemID)
        {
            return (int)comType.InvokeMember("GetFontFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontFlagItemID});
        }

        public int GetFontID(int Index)
        {
            return (int)comType.InvokeMember("GetFontID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFontIsEmbedded()
        {
            return (int)comType.InvokeMember("GetFontIsEmbedded",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetFontIsSubsetted()
        {
            return (int)comType.InvokeMember("GetFontIsSubsetted",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetFontMetrics(int MetricType)
        {
            return (int)comType.InvokeMember("GetFontMetrics",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MetricType});
        }

        public int GetFontObjectNumber()
        {
            return (int)comType.InvokeMember("GetFontObjectNumber",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetFormFieldActionID(int Index, string TriggerEvent)
        {
            return (int)comType.InvokeMember("GetFormFieldActionID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, TriggerEvent});
        }

        public int GetFormFieldAlignment(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldAlignment",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldAnnotFlags(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldAnnotFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetFormFieldBackgroundColor(int Index, 
            int ColorComponent)
        {
            return (double)comType.InvokeMember("GetFormFieldBackgroundColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ColorComponent});
        }

        public int GetFormFieldBackgroundColorType(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldBackgroundColorType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetFormFieldBorderColor(int Index, int ColorComponent)
        {
            return (double)comType.InvokeMember("GetFormFieldBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ColorComponent});
        }

        public int GetFormFieldBorderColorType(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldBorderColorType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetFormFieldBorderProperty(int Index, int PropKey)
        {
            return (double)comType.InvokeMember("GetFormFieldBorderProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, PropKey});
        }

        public int GetFormFieldBorderStyle(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldBorderStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetFormFieldBound(int Index, int Edge)
        {
            return (double)comType.InvokeMember("GetFormFieldBound",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Edge});
        }

        public string GetFormFieldCaption(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldCaption",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public string GetFormFieldCaptionEx(int Index, int StringType)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldCaptionEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, StringType}));
        }

        public int GetFormFieldCheckStyle(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldCheckStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldChildTitle(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldChildTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public int GetFormFieldChoiceType(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldChoiceType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public double GetFormFieldColor(int Index, int ColorComponent)
        {
            return (double)comType.InvokeMember("GetFormFieldColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ColorComponent});
        }

        public int GetFormFieldComb(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldComb",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldDefaultValue(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldDefaultValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public string GetFormFieldDescription(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldDescription",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public int GetFormFieldFlags(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldFontName(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldFontName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public string GetFormFieldJavaScript(int Index, string ActionType)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType}));
        }

        public int GetFormFieldKidCount(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldKidCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldKidTempIndex(int Index, int SubIndex)
        {
            return (int)comType.InvokeMember("GetFormFieldKidTempIndex",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubIndex});
        }

        public int GetFormFieldMaxLen(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldMaxLen",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldNoExport(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldNoExport",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldPage(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldPrintable(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldPrintable",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldReadOnly(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldReadOnly",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldRequired(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldRequired",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldRichTextString(int Index, string Key)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldRichTextString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Key}));
        }

        public int GetFormFieldRotation(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldRotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldSubCount(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldSubCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldSubDisplayName(int Index, int SubIndex)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldSubDisplayName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubIndex}));
        }

        public string GetFormFieldSubName(int Index, int SubIndex)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldSubName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubIndex}));
        }

        public string GetFormFieldSubmitActionString(int Index, 
            string ActionType)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldSubmitActionString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType}));
        }

        public int GetFormFieldTabOrder(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldTabOrder",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetFormFieldTabOrderEx(int Index, int Options)
        {
            return (int)comType.InvokeMember("GetFormFieldTabOrderEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Options});
        }

        public int GetFormFieldTextFlags(int Index, int ValueKey)
        {
            return (int)comType.InvokeMember("GetFormFieldTextFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ValueKey});
        }

        public double GetFormFieldTextSize(int Index)
        {
            return (double)comType.InvokeMember("GetFormFieldTextSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldTitle(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public int GetFormFieldType(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldValue(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public string GetFormFieldValueByTitle(string Title)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldValueByTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title}));
        }

        public int GetFormFieldVisible(int Index)
        {
            return (int)comType.InvokeMember("GetFormFieldVisible",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetFormFieldWebLink(int Index, string ActionType)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFieldWebLink",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType}));
        }

        public int GetFormFontCount()
        {
            return (int)comType.InvokeMember("GetFormFontCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetFormFontName(int FontIndex)
        {
            return Convert.ToString(comType.InvokeMember("GetFormFontName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontIndex}));
        }

        public string GetGlobalJavaScript(string PackageName)
        {
            return Convert.ToString(comType.InvokeMember("GetGlobalJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PackageName}));
        }

        public double GetHTMLTextHeight(double Width, string HTMLText)
        {
            return (double)comType.InvokeMember("GetHTMLTextHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, HTMLText});
        }

        public int GetHTMLTextLineCount(double Width, string HTMLText)
        {
            return (int)comType.InvokeMember("GetHTMLTextLineCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, HTMLText});
        }

        public double GetHTMLTextWidth(double MaxWidth, string HTMLText)
        {
            return (double)comType.InvokeMember("GetHTMLTextWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MaxWidth, HTMLText});
        }

        public int GetImageID(int Index)
        {
            return (int)comType.InvokeMember("GetImageID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetImageListCount(int ImageListID)
        {
            return (int)comType.InvokeMember("GetImageListCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID});
        }

        public byte[] GetImageListItemDataToVariant(int ImageListID, 
            int ImageIndex, int Options)
        {
            return (byte[])comType.InvokeMember("GetImageListItemDataToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID, ImageIndex, Options});
        }

        public double GetImageListItemDblProperty(int ImageListID, 
            int ImageIndex, int PropertyID)
        {
            return (double)comType.InvokeMember("GetImageListItemDblProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID, ImageIndex, PropertyID});
        }

        public string GetImageListItemFormatDesc(int ImageListID, 
            int ImageIndex, int Options)
        {
            return Convert.ToString(comType.InvokeMember("GetImageListItemFormatDesc",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID, ImageIndex, Options}));
        }

        public int GetImageListItemIntProperty(int ImageListID, 
            int ImageIndex, int PropertyID)
        {
            return (int)comType.InvokeMember("GetImageListItemIntProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID, ImageIndex, PropertyID});
        }

        public int GetImageMeasureDict()
        {
            return (int)comType.InvokeMember("GetImageMeasureDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetImagePageCount(string FileName)
        {
            return (int)comType.InvokeMember("GetImagePageCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int GetImagePtDataDict()
        {
            return (int)comType.InvokeMember("GetImagePtDataDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetInformation(int Key)
        {
            return Convert.ToString(comType.InvokeMember("GetInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key}));
        }

        public string GetInstalledFontsByCharset(int CharsetIndex, 
            int Options)
        {
            return Convert.ToString(comType.InvokeMember("GetInstalledFontsByCharset",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CharsetIndex, Options}));
        }

        public string GetInstalledFontsByCodePage(int CodePage, int Options)
        {
            return Convert.ToString(comType.InvokeMember("GetInstalledFontsByCodePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CodePage, Options}));
        }

        public int GetKerning(string CharPair)
        {
            return (int)comType.InvokeMember("GetKerning",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CharPair});
        }

        public string GetLatestPrinterNames()
        {
            return Convert.ToString(comType.InvokeMember("GetLatestPrinterNames",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int GetMaxObjectNumber()
        {
            return (int)comType.InvokeMember("GetMaxObjectNumber",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetMeasureDictBoundsCount(int MeasureDictID)
        {
            return (int)comType.InvokeMember("GetMeasureDictBoundsCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID});
        }

        public double GetMeasureDictBoundsItem(int MeasureDictID, 
            int ItemIndex)
        {
            return (double)comType.InvokeMember("GetMeasureDictBoundsItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, ItemIndex});
        }

        public int GetMeasureDictCoordinateSystem(int MeasureDictID)
        {
            return (int)comType.InvokeMember("GetMeasureDictCoordinateSystem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID});
        }

        public int GetMeasureDictDCSDict(int MeasureDictID)
        {
            return (int)comType.InvokeMember("GetMeasureDictDCSDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID});
        }

        public int GetMeasureDictGCSDict(int MeasureDictID)
        {
            return (int)comType.InvokeMember("GetMeasureDictGCSDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID});
        }

        public int GetMeasureDictGPTSCount(int MeasureDictID)
        {
            return (int)comType.InvokeMember("GetMeasureDictGPTSCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID});
        }

        public double GetMeasureDictGPTSItem(int MeasureDictID, 
            int ItemIndex)
        {
            return (double)comType.InvokeMember("GetMeasureDictGPTSItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, ItemIndex});
        }

        public int GetMeasureDictLPTSCount(int MeasureDictID)
        {
            return (int)comType.InvokeMember("GetMeasureDictLPTSCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID});
        }

        public double GetMeasureDictLPTSItem(int MeasureDictID, 
            int ItemIndex)
        {
            return (double)comType.InvokeMember("GetMeasureDictLPTSItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, ItemIndex});
        }

        public int GetMeasureDictPDU(int MeasureDictID, int UnitIndex)
        {
            return (int)comType.InvokeMember("GetMeasureDictPDU",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, UnitIndex});
        }

        public int GetNamedDestination(string DestName)
        {
            return (int)comType.InvokeMember("GetNamedDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestName});
        }

        public int GetNeedAppearances()
        {
            return (int)comType.InvokeMember("GetNeedAppearances",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetNextOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("GetNextOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int GetObjectCount()
        {
            return (int)comType.InvokeMember("GetObjectCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetObjectDecodeError(int ObjectNumber)
        {
            return (int)comType.InvokeMember("GetObjectDecodeError",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ObjectNumber});
        }

        public byte[] GetObjectToVariant(int ObjectNumber)
        {
            return (byte[])comType.InvokeMember("GetObjectToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ObjectNumber});
        }

        public int GetOpenActionDestination()
        {
            return (int)comType.InvokeMember("GetOpenActionDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetOpenActionJavaScript()
        {
            return Convert.ToString(comType.InvokeMember("GetOpenActionJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int GetOptionalContentConfigCount()
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetOptionalContentConfigLocked(
            int OptionalContentConfigID, int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigLocked",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, OptionalContentGroupID});
        }

        public int GetOptionalContentConfigOrderCount(
            int OptionalContentConfigID)
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigOrderCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID});
        }

        public int GetOptionalContentConfigOrderItemID(
            int OptionalContentConfigID, int ItemIndex)
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigOrderItemID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, ItemIndex});
        }

        public string GetOptionalContentConfigOrderItemLabel(
            int OptionalContentConfigID, int ItemIndex)
        {
            return Convert.ToString(comType.InvokeMember("GetOptionalContentConfigOrderItemLabel",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, ItemIndex}));
        }

        public int GetOptionalContentConfigOrderItemLevel(
            int OptionalContentConfigID, int ItemIndex)
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigOrderItemLevel",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, ItemIndex});
        }

        public int GetOptionalContentConfigOrderItemType(
            int OptionalContentConfigID, int ItemIndex)
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigOrderItemType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, ItemIndex});
        }

        public int GetOptionalContentConfigState(
            int OptionalContentConfigID, int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("GetOptionalContentConfigState",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, OptionalContentGroupID});
        }

        public int GetOptionalContentGroupID(int Index)
        {
            return (int)comType.InvokeMember("GetOptionalContentGroupID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetOptionalContentGroupName(
            int OptionalContentGroupID)
        {
            return Convert.ToString(comType.InvokeMember("GetOptionalContentGroupName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID}));
        }

        public int GetOptionalContentGroupPrintable(
            int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("GetOptionalContentGroupPrintable",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID});
        }

        public int GetOptionalContentGroupVisible(
            int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("GetOptionalContentGroupVisible",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID});
        }

        public int GetOrigin()
        {
            return (int)comType.InvokeMember("GetOrigin",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetOutlineActionID(int OutlineID)
        {
            return (int)comType.InvokeMember("GetOutlineActionID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public double GetOutlineColor(int OutlineID, int ColorComponent)
        {
            return (double)comType.InvokeMember("GetOutlineColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, ColorComponent});
        }

        public int GetOutlineDest(int OutlineID)
        {
            return (int)comType.InvokeMember("GetOutlineDest",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int GetOutlineID(int Index)
        {
            return (int)comType.InvokeMember("GetOutlineID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public string GetOutlineJavaScript(int OutlineID)
        {
            return Convert.ToString(comType.InvokeMember("GetOutlineJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID}));
        }

        public int GetOutlineObjectNumber(int OutlineID)
        {
            return (int)comType.InvokeMember("GetOutlineObjectNumber",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public string GetOutlineOpenFile(int OutlineID)
        {
            return Convert.ToString(comType.InvokeMember("GetOutlineOpenFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID}));
        }

        public int GetOutlinePage(int OutlineID)
        {
            return (int)comType.InvokeMember("GetOutlinePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int GetOutlineStyle(int OutlineID)
        {
            return (int)comType.InvokeMember("GetOutlineStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public string GetOutlineWebLink(int OutlineID)
        {
            return Convert.ToString(comType.InvokeMember("GetOutlineWebLink",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID}));
        }

        public double GetPDF417SymbolHeight(string Text, int Options, 
            int FixedColumns, int FixedRows, int ErrorLevel, 
            double ModuleSize, double HeightWidthRatio)
        {
            return (double)comType.InvokeMember("GetPDF417SymbolHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Text, Options, FixedColumns, FixedRows, ErrorLevel, 
                ModuleSize, HeightWidthRatio});
        }

        public double GetPDF417SymbolWidth(string Text, int Options, 
            int FixedColumns, int FixedRows, int ErrorLevel, 
            double ModuleSize, double HeightWidthRatio)
        {
            return (double)comType.InvokeMember("GetPDF417SymbolWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Text, Options, FixedColumns, FixedRows, ErrorLevel, 
                ModuleSize, HeightWidthRatio});
        }

        public double GetPageBox(int BoxType, int Dimension)
        {
            return (double)comType.InvokeMember("GetPageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                BoxType, Dimension});
        }

        public string GetPageColorSpaces(int Options)
        {
            return Convert.ToString(comType.InvokeMember("GetPageColorSpaces",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options}));
        }

        public byte[] GetPageContentToVariant()
        {
            return (byte[])comType.InvokeMember("GetPageContentToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetPageImageList(int Options)
        {
            return (int)comType.InvokeMember("GetPageImageList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public string GetPageJavaScript(string ActionType)
        {
            return Convert.ToString(comType.InvokeMember("GetPageJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionType}));
        }

        public string GetPageLGIDictContent(int DictIndex)
        {
            return Convert.ToString(comType.InvokeMember("GetPageLGIDictContent",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DictIndex}));
        }

        public int GetPageLGIDictCount()
        {
            return (int)comType.InvokeMember("GetPageLGIDictCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetPageLabel(int Page)
        {
            return Convert.ToString(comType.InvokeMember("GetPageLabel",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Page}));
        }

        public int GetPageLayout()
        {
            return (int)comType.InvokeMember("GetPageLayout",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetPageMode()
        {
            return (int)comType.InvokeMember("GetPageMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetPageText(int ExtractOptions)
        {
            return Convert.ToString(comType.InvokeMember("GetPageText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ExtractOptions}));
        }

        public double GetPageUserUnit()
        {
            return (double)comType.InvokeMember("GetPageUserUnit",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetPageViewPortCount()
        {
            return (int)comType.InvokeMember("GetPageViewPortCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetPageViewPortID(int Index)
        {
            return (int)comType.InvokeMember("GetPageViewPortID",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int GetParentOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("GetParentOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int GetPrevOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("GetPrevOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public byte[] GetPrintPreviewBitmapToVariant(string PrinterName, 
            int PreviewPage, int PrintOptions, int MaxDimension, 
            int PreviewOptions)
        {
            return (byte[])comType.InvokeMember("GetPrintPreviewBitmapToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName, PreviewPage, PrintOptions, MaxDimension, 
                PreviewOptions});
        }

        public string GetPrinterBins(string PrinterName)
        {
            return Convert.ToString(comType.InvokeMember("GetPrinterBins",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName}));
        }

        public byte[] GetPrinterDevModeToVariant(string PrinterName)
        {
            return (byte[])comType.InvokeMember("GetPrinterDevModeToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName});
        }

        public string GetPrinterMediaTypes(string PrinterName)
        {
            return Convert.ToString(comType.InvokeMember("GetPrinterMediaTypes",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName}));
        }

        public string GetPrinterNames()
        {
            return Convert.ToString(comType.InvokeMember("GetPrinterNames",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public double GetRenderScale()
        {
            return (double)comType.InvokeMember("GetRenderScale",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int GetSignProcessByteRange(int SignProcessID, 
            int ArrayPosition)
        {
            return (int)comType.InvokeMember("GetSignProcessByteRange",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, ArrayPosition});
        }

        public int GetSignProcessResult(int SignProcessID)
        {
            return (int)comType.InvokeMember("GetSignProcessResult",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID});
        }

        public int GetStringListCount(int StringListID)
        {
            return (int)comType.InvokeMember("GetStringListCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StringListID});
        }

        public string GetStringListItem(int StringListID, int ItemIndex)
        {
            return Convert.ToString(comType.InvokeMember("GetStringListItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StringListID, ItemIndex}));
        }

        public string GetTabOrderMode()
        {
            return Convert.ToString(comType.InvokeMember("GetTabOrderMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public double GetTableCellDblProperty(int TableID, int RowNumber, 
            int ColumnNumber, int Tag)
        {
            return (double)comType.InvokeMember("GetTableCellDblProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, RowNumber, ColumnNumber, Tag});
        }

        public int GetTableCellIntProperty(int TableID, int RowNumber, 
            int ColumnNumber, int Tag)
        {
            return (int)comType.InvokeMember("GetTableCellIntProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, RowNumber, ColumnNumber, Tag});
        }

        public string GetTableCellStrProperty(int TableID, int RowNumber, 
            int ColumnNumber, int Tag)
        {
            return Convert.ToString(comType.InvokeMember("GetTableCellStrProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, RowNumber, ColumnNumber, Tag}));
        }

        public int GetTableColumnCount(int TableID)
        {
            return (int)comType.InvokeMember("GetTableColumnCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID});
        }

        public int GetTableLastDrawnRow(int TableID)
        {
            return (int)comType.InvokeMember("GetTableLastDrawnRow",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID});
        }

        public int GetTableRowCount(int TableID)
        {
            return (int)comType.InvokeMember("GetTableRowCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID});
        }

        public string GetTempPath()
        {
            return Convert.ToString(comType.InvokeMember("GetTempPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public double GetTextAscent()
        {
            return (double)comType.InvokeMember("GetTextAscent",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetTextBlockAsString(int TextBlockListID, int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetTextBlockAsString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index}));
        }

        public double GetTextBlockBound(int TextBlockListID, int Index, 
            int BoundIndex)
        {
            return (double)comType.InvokeMember("GetTextBlockBound",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index, BoundIndex});
        }

        public double GetTextBlockCharWidth(int TextBlockListID, 
            int Index, int CharIndex)
        {
            return (double)comType.InvokeMember("GetTextBlockCharWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index, CharIndex});
        }

        public double GetTextBlockColor(int TextBlockListID, int Index, 
            int ColorComponent)
        {
            return (double)comType.InvokeMember("GetTextBlockColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index, ColorComponent});
        }

        public int GetTextBlockColorType(int TextBlockListID, int Index)
        {
            return (int)comType.InvokeMember("GetTextBlockColorType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index});
        }

        public int GetTextBlockCount(int TextBlockListID)
        {
            return (int)comType.InvokeMember("GetTextBlockCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID});
        }

        public string GetTextBlockFontName(int TextBlockListID, int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetTextBlockFontName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index}));
        }

        public double GetTextBlockFontSize(int TextBlockListID, int Index)
        {
            return (double)comType.InvokeMember("GetTextBlockFontSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index});
        }

        public string GetTextBlockText(int TextBlockListID, int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetTextBlockText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID, Index}));
        }

        public double GetTextBound(int Edge)
        {
            return (double)comType.InvokeMember("GetTextBound",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Edge});
        }

        public double GetTextDescent()
        {
            return (double)comType.InvokeMember("GetTextDescent",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public double GetTextHeight()
        {
            return (double)comType.InvokeMember("GetTextHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public double GetTextSize()
        {
            return (double)comType.InvokeMember("GetTextSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public double GetTextWidth(string Text)
        {
            return (double)comType.InvokeMember("GetTextWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Text});
        }

        public string GetUnicodeCharactersFromEncoding(int Encoding)
        {
            return Convert.ToString(comType.InvokeMember("GetUnicodeCharactersFromEncoding",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Encoding}));
        }

        public double GetViewPortBBox(int ViewPortID, int Dimension)
        {
            return (double)comType.InvokeMember("GetViewPortBBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ViewPortID, Dimension});
        }

        public int GetViewPortMeasureDict(int ViewPortID)
        {
            return (int)comType.InvokeMember("GetViewPortMeasureDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ViewPortID});
        }

        public string GetViewPortName(int ViewPortID)
        {
            return Convert.ToString(comType.InvokeMember("GetViewPortName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ViewPortID}));
        }

        public int GetViewPortPtDataDict(int ViewPortID)
        {
            return (int)comType.InvokeMember("GetViewPortPtDataDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ViewPortID});
        }

        public int GetViewerPreferences(int Option)
        {
            return (int)comType.InvokeMember("GetViewerPreferences",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Option});
        }

        public string GetWrappedText(double Width, string Delimiter, 
            string Text)
        {
            return Convert.ToString(comType.InvokeMember("GetWrappedText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, Delimiter, Text}));
        }

        public string GetWrappedTextBreakString(double Width, 
            string Delimiter, string Text)
        {
            return Convert.ToString(comType.InvokeMember("GetWrappedTextBreakString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, Delimiter, Text}));
        }

        public double GetWrappedTextHeight(double Width, string Text)
        {
            return (double)comType.InvokeMember("GetWrappedTextHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, Text});
        }

        public int GetWrappedTextLineCount(double Width, string Text)
        {
            return (int)comType.InvokeMember("GetWrappedTextLineCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Width, Text});
        }

        public int GetXFAFormFieldCount()
        {
            return (int)comType.InvokeMember("GetXFAFormFieldCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GetXFAFormFieldName(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GetXFAFormFieldName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public string GetXFAFormFieldNames(string Delimiter)
        {
            return Convert.ToString(comType.InvokeMember("GetXFAFormFieldNames",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Delimiter}));
        }

        public string GetXFAFormFieldValue(string XFAFieldName)
        {
            return Convert.ToString(comType.InvokeMember("GetXFAFormFieldValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XFAFieldName}));
        }

        public int GlobalJavaScriptCount()
        {
            return (int)comType.InvokeMember("GlobalJavaScriptCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string GlobalJavaScriptPackageName(int Index)
        {
            return Convert.ToString(comType.InvokeMember("GlobalJavaScriptPackageName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public int HasFontResources()
        {
            return (int)comType.InvokeMember("HasFontResources",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int HasPageBox(int BoxType)
        {
            return (int)comType.InvokeMember("HasPageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                BoxType});
        }

        public int HidePage()
        {
            return (int)comType.InvokeMember("HidePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageCount()
        {
            return (int)comType.InvokeMember("ImageCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageFillColor()
        {
            return (int)comType.InvokeMember("ImageFillColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageHeight()
        {
            return (int)comType.InvokeMember("ImageHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageHorizontalResolution()
        {
            return (int)comType.InvokeMember("ImageHorizontalResolution",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageResolutionUnits()
        {
            return (int)comType.InvokeMember("ImageResolutionUnits",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageType()
        {
            return (int)comType.InvokeMember("ImageType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageVerticalResolution()
        {
            return (int)comType.InvokeMember("ImageVerticalResolution",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImageWidth()
        {
            return (int)comType.InvokeMember("ImageWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int ImportEMFFromFile(string FileName, int FontOptions, 
            int GeneralOptions)
        {
            return (int)comType.InvokeMember("ImportEMFFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, FontOptions, GeneralOptions});
        }

        public int InsertPages(int StartPage, int PageCount)
        {
            return (int)comType.InvokeMember("InsertPages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StartPage, PageCount});
        }

        public int InsertTableColumns(int TableID, int Position, 
            int NewColumnCount)
        {
            return (int)comType.InvokeMember("InsertTableColumns",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, Position, NewColumnCount});
        }

        public int InsertTableRows(int TableID, int Position, 
            int NewRowCount)
        {
            return (int)comType.InvokeMember("InsertTableRows",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, Position, NewRowCount});
        }

        public int IsAnnotFormField(int Index)
        {
            return (int)comType.InvokeMember("IsAnnotFormField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int IsLinearized()
        {
            return (int)comType.InvokeMember("IsLinearized",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int IsTaggedPDF()
        {
            return (int)comType.InvokeMember("IsTaggedPDF",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int LastErrorCode()
        {
            return (int)comType.InvokeMember("LastErrorCode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string LastRenderError()
        {
            return Convert.ToString(comType.InvokeMember("LastRenderError",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public string LibraryVersion()
        {
            return Convert.ToString(comType.InvokeMember("LibraryVersion",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public string LibraryVersionEx()
        {
            return Convert.ToString(comType.InvokeMember("LibraryVersionEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public string LicenseInfo()
        {
            return Convert.ToString(comType.InvokeMember("LicenseInfo",
                BindingFlags.InvokeMethod, null, comObject, new object[] {}));
        }

        public int LinearizeFile(string InputFileName, string Password, 
            string OutputFileName, int Options)
        {
            return (int)comType.InvokeMember("LinearizeFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, OutputFileName, Options});
        }

        public int LoadFromCanvasDC(double DPI, int Options)
        {
            return (int)comType.InvokeMember("LoadFromCanvasDC",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, Options});
        }

        public int LoadFromFile(string FileName, string Password)
        {
            return (int)comType.InvokeMember("LoadFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName, Password});
        }

        public int LoadFromVariant(byte[] Source, string Password)
        {
            return (int)comType.InvokeMember("LoadFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source, Password});
        }

        public int LoadState()
        {
            return (int)comType.InvokeMember("LoadState",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int MergeDocument(int DocumentID)
        {
            return (int)comType.InvokeMember("MergeDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DocumentID});
        }

        public int MergeFileList(string ListName, string OutputFileName)
        {
            return (int)comType.InvokeMember("MergeFileList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ListName, OutputFileName});
        }

        public int MergeFileListFast(string ListName, string OutputFileName)
        {
            return (int)comType.InvokeMember("MergeFileListFast",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ListName, OutputFileName});
        }

        public int MergeFiles(string FirstFileName, string SecondFileName, 
            string OutputFileName)
        {
            return (int)comType.InvokeMember("MergeFiles",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FirstFileName, SecondFileName, OutputFileName});
        }

        public int MergeTableCells(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn)
        {
            return (int)comType.InvokeMember("MergeTableCells",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn});
        }

        public int MoveContentStream(int FromPosition, int ToPosition)
        {
            return (int)comType.InvokeMember("MoveContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FromPosition, ToPosition});
        }

        public int MoveOutlineAfter(int OutlineID, int SiblingID)
        {
            return (int)comType.InvokeMember("MoveOutlineAfter",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, SiblingID});
        }

        public int MoveOutlineBefore(int OutlineID, int SiblingID)
        {
            return (int)comType.InvokeMember("MoveOutlineBefore",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, SiblingID});
        }

        public int MovePage(int NewPosition)
        {
            return (int)comType.InvokeMember("MovePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewPosition});
        }

        public int MovePath(double NewX, double NewY)
        {
            return (int)comType.InvokeMember("MovePath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewX, NewY});
        }

        public int MultiplyScale(double MultScaleBy)
        {
            return (int)comType.InvokeMember("MultiplyScale",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MultScaleBy});
        }

        public int NewCMYKAxialShader(string ShaderName, double StartX, 
            double StartY, double StartCyan, double StartMagenta, 
            double StartYellow, double StartBlack, double EndX, 
            double EndY, double EndCyan, double EndMagenta, 
            double EndYellow, double EndBlack, int Extend)
        {
            return (int)comType.InvokeMember("NewCMYKAxialShader",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ShaderName, StartX, StartY, StartCyan, StartMagenta, 
                StartYellow, StartBlack, EndX, EndY, EndCyan, EndMagenta, 
                EndYellow, EndBlack, Extend});
        }

        public int NewChildFormField(int Index, string Title, int FieldType)
        {
            return (int)comType.InvokeMember("NewChildFormField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Title, FieldType});
        }

        public int NewContentStream()
        {
            return (int)comType.InvokeMember("NewContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string NewCustomPrinter(string OriginalPrinterName)
        {
            return Convert.ToString(comType.InvokeMember("NewCustomPrinter",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OriginalPrinterName}));
        }

        public int NewDestination(int DestPage, int Zoom, int DestType, 
            double Left, double Top, double Right, double Bottom)
        {
            return (int)comType.InvokeMember("NewDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestPage, Zoom, DestType, Left, Top, Right, Bottom});
        }

        public int NewDocument()
        {
            return (int)comType.InvokeMember("NewDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int NewFormField(string Title, int FieldType)
        {
            return (int)comType.InvokeMember("NewFormField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title, FieldType});
        }

        public int NewInternalPrinterObject(int Options)
        {
            return (int)comType.InvokeMember("NewInternalPrinterObject",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public int NewNamedDestination(string DestName, int DestID)
        {
            return (int)comType.InvokeMember("NewNamedDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestName, DestID});
        }

        public int NewOptionalContentGroup(string GroupName)
        {
            return (int)comType.InvokeMember("NewOptionalContentGroup",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                GroupName});
        }

        public int NewOutline(int Parent, string Title, int DestPage, 
            double DestPosition)
        {
            return (int)comType.InvokeMember("NewOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Parent, Title, DestPage, DestPosition});
        }

        public int NewPage()
        {
            return (int)comType.InvokeMember("NewPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int NewPageFromCanvasDC(double DPI, int Options)
        {
            return (int)comType.InvokeMember("NewPageFromCanvasDC",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, Options});
        }

        public int NewPages(int PageCount)
        {
            return (int)comType.InvokeMember("NewPages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PageCount});
        }

        public int NewPostScriptXObject(string PS)
        {
            return (int)comType.InvokeMember("NewPostScriptXObject",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PS});
        }

        public int NewRGBAxialShader(string ShaderName, double StartX, 
            double StartY, double StartRed, double StartGreen, 
            double StartBlue, double EndX, double EndY, double EndRed, 
            double EndGreen, double EndBlue, int Extend)
        {
            return (int)comType.InvokeMember("NewRGBAxialShader",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ShaderName, StartX, StartY, StartRed, StartGreen, 
                StartBlue, EndX, EndY, EndRed, EndGreen, EndBlue, Extend});
        }

        public int NewSignProcessFromFile(string InputFile, string Password)
        {
            return (int)comType.InvokeMember("NewSignProcessFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFile, Password});
        }

        public int NewStaticOutline(int Parent, string Title)
        {
            return (int)comType.InvokeMember("NewStaticOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Parent, Title});
        }

        public int NewTilingPatternFromCapturedPage(string PatternName, 
            int CaptureID)
        {
            return (int)comType.InvokeMember("NewTilingPatternFromCapturedPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PatternName, CaptureID});
        }

        public int NoEmbedFontListAdd(string FontName)
        {
            return (int)comType.InvokeMember("NoEmbedFontListAdd",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontName});
        }

        public int NoEmbedFontListCount()
        {
            return (int)comType.InvokeMember("NoEmbedFontListCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string NoEmbedFontListGet(int Index)
        {
            return Convert.ToString(comType.InvokeMember("NoEmbedFontListGet",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index}));
        }

        public int NoEmbedFontListRemoveAll()
        {
            return (int)comType.InvokeMember("NoEmbedFontListRemoveAll",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int NoEmbedFontListRemoveIndex(int Index)
        {
            return (int)comType.InvokeMember("NoEmbedFontListRemoveIndex",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int NoEmbedFontListRemoveName(string FontName)
        {
            return (int)comType.InvokeMember("NoEmbedFontListRemoveName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontName});
        }

        public int NormalizePage(int NormalizeOptions)
        {
            return (int)comType.InvokeMember("NormalizePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NormalizeOptions});
        }

        public int OpenOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("OpenOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int OptionalContentGroupCount()
        {
            return (int)comType.InvokeMember("OptionalContentGroupCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int OutlineCount()
        {
            return (int)comType.InvokeMember("OutlineCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public string OutlineTitle(int OutlineID)
        {
            return Convert.ToString(comType.InvokeMember("OutlineTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID}));
        }

        public int PDFiumPrintDocument(string PrinterName, int StartPage, 
            int EndPage, int Options)
        {
            return (int)comType.InvokeMember("PDFiumPrintDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName, StartPage, EndPage, Options});
        }

        public int PageCount()
        {
            return (int)comType.InvokeMember("PageCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int PageHasFontResources(int PageNumber)
        {
            return (int)comType.InvokeMember("PageHasFontResources",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PageNumber});
        }

        public double PageHeight()
        {
            return (double)comType.InvokeMember("PageHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int PageJavaScriptAction(string ActionType, 
            string JavaScript)
        {
            return (int)comType.InvokeMember("PageJavaScriptAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionType, JavaScript});
        }

        public int PageRotation()
        {
            return (int)comType.InvokeMember("PageRotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public double PageWidth()
        {
            return (double)comType.InvokeMember("PageWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int PrintDocument(string PrinterName, int StartPage, 
            int EndPage, int Options)
        {
            return (int)comType.InvokeMember("PrintDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName, StartPage, EndPage, Options});
        }

        public int PrintDocument(string PrinterName, int StartPage, 
            int EndPage, int Options, string FileName)
        {
            return (int)comType.InvokeMember("PrintDocumentToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName, StartPage, EndPage, Options, FileName});
        }

        public int PrintMode(int Mode)
        {
            return (int)comType.InvokeMember("PrintMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Mode});
        }

        public int PrintOptions(int PageScaling, int AutoRotateCenter, 
            string Title)
        {
            return (int)comType.InvokeMember("PrintOptions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PageScaling, AutoRotateCenter, Title});
        }

        public int PrintPages(string PrinterName, string PageRanges, 
            int Options)
        {
            return (int)comType.InvokeMember("PrintPages",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName, PageRanges, Options});
        }

        public int PrintPagesToFile(string PrinterName, string PageRanges, 
            int Options, string FileName)
        {
            return (int)comType.InvokeMember("PrintPagesToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PrinterName, PageRanges, Options, FileName});
        }

        public int ReleaseImage(int ImageID)
        {
            return (int)comType.InvokeMember("ReleaseImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageID});
        }

        public int ReleaseImageList(int ImageListID)
        {
            return (int)comType.InvokeMember("ReleaseImageList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID});
        }

        public int ReleaseSignProcess(int SignProcessID)
        {
            return (int)comType.InvokeMember("ReleaseSignProcess",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID});
        }

        public int ReleaseStringList(int StringListID)
        {
            return (int)comType.InvokeMember("ReleaseStringList",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StringListID});
        }

        public int ReleaseTextBlocks(int TextBlockListID)
        {
            return (int)comType.InvokeMember("ReleaseTextBlocks",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextBlockListID});
        }

        public int RemoveAppearanceStream(int Index)
        {
            return (int)comType.InvokeMember("RemoveAppearanceStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int RemoveCustomInformation(string Key)
        {
            return (int)comType.InvokeMember("RemoveCustomInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key});
        }

        public int RemoveDocument(int DocumentID)
        {
            return (int)comType.InvokeMember("RemoveDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DocumentID});
        }

        public int RemoveEmbeddedFile(int Index)
        {
            return (int)comType.InvokeMember("RemoveEmbeddedFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int RemoveFormFieldBackgroundColor(int Index)
        {
            return (int)comType.InvokeMember("RemoveFormFieldBackgroundColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int RemoveFormFieldBorderColor(int Index)
        {
            return (int)comType.InvokeMember("RemoveFormFieldBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int RemoveFormFieldChoiceSub(int Index, string SubName)
        {
            return (int)comType.InvokeMember("RemoveFormFieldChoiceSub",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubName});
        }

        public int RemoveGlobalJavaScript(string PackageName)
        {
            return (int)comType.InvokeMember("RemoveGlobalJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PackageName});
        }

        public int RemoveOpenAction()
        {
            return (int)comType.InvokeMember("RemoveOpenAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int RemoveOutline(int OutlineID)
        {
            return (int)comType.InvokeMember("RemoveOutline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID});
        }

        public int RemovePageBox(int BoxType)
        {
            return (int)comType.InvokeMember("RemovePageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                BoxType});
        }

        public int RemoveSharedContentStreams()
        {
            return (int)comType.InvokeMember("RemoveSharedContentStreams",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int RemoveStyle(string StyleName)
        {
            return (int)comType.InvokeMember("RemoveStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StyleName});
        }

        public int RemoveUsageRights()
        {
            return (int)comType.InvokeMember("RemoveUsageRights",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int RemoveXFAEntries(int Options)
        {
            return (int)comType.InvokeMember("RemoveXFAEntries",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public int RenderAsMultipageTIFFToFile(double DPI, 
            string PageRanges, int ImageOptions, int OutputOptions, 
            string FileName)
        {
            return (int)comType.InvokeMember("RenderAsMultipageTIFFToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, PageRanges, ImageOptions, OutputOptions, FileName});
        }

        public int RenderDocumentToFile(double DPI, int StartPage, 
            int EndPage, int Options, string FileName)
        {
            return (int)comType.InvokeMember("RenderDocumentToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, StartPage, EndPage, Options, FileName});
        }

        public int RenderPageToDC(double DPI, int Page, IntPtr DC)
        {
            return (int)comType.InvokeMember("RenderPageToDC",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, Page, DC});
        }

        public int RenderPageToFile(double DPI, int Page, int Options, 
            string FileName)
        {
            return (int)comType.InvokeMember("RenderPageToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, Page, Options, FileName});
        }

        public byte[] RenderPageToVariant(double DPI, int Page, int Options)
        {
            return (byte[])comType.InvokeMember("RenderPageToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DPI, Page, Options});
        }

        public int ReplaceFonts(int Options)
        {
            return (int)comType.InvokeMember("ReplaceFonts",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public int ReplaceImage(int OriginalImageID, int NewImageID)
        {
            return (int)comType.InvokeMember("ReplaceImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OriginalImageID, NewImageID});
        }

        public int ReplaceTag(string Tag, string NewValue)
        {
            return (int)comType.InvokeMember("ReplaceTag",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Tag, NewValue});
        }

        public int RequestPrinterStatus(int StatusCommand)
        {
            return (int)comType.InvokeMember("RequestPrinterStatus",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StatusCommand});
        }

        public int RetrieveCustomDataToFile(string Key, string FileName, 
            int Location)
        {
            return (int)comType.InvokeMember("RetrieveCustomDataToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, FileName, Location});
        }

        public byte[] RetrieveCustomDataToVariant(string Key, int Location)
        {
            return (byte[])comType.InvokeMember("RetrieveCustomDataToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, Location});
        }

        public int ReverseImage(int Reset)
        {
            return (int)comType.InvokeMember("ReverseImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Reset});
        }

        public int RotatePage(int PageRotation)
        {
            return (int)comType.InvokeMember("RotatePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PageRotation});
        }

        public int SaveFontToFile(string FileName)
        {
            return (int)comType.InvokeMember("SaveFontToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int SaveImageListItemDataToFile(int ImageListID, 
            int ImageIndex, int Options, string ImageFileName)
        {
            return (int)comType.InvokeMember("SaveImageListItemDataToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageListID, ImageIndex, Options, ImageFileName});
        }

        public int SaveImageToFile(string FileName)
        {
            return (int)comType.InvokeMember("SaveImageToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public byte[] SaveImageToVariant()
        {
            return (byte[])comType.InvokeMember("SaveImageToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SaveState()
        {
            return (int)comType.InvokeMember("SaveState",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SaveStyle(string StyleName)
        {
            return (int)comType.InvokeMember("SaveStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StyleName});
        }

        public int SaveToFile(string FileName)
        {
            return (int)comType.InvokeMember("SaveToFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public byte[] SaveToVariant()
        {
            return (byte[])comType.InvokeMember("SaveToVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SecurityInfo(int SecurityItem)
        {
            return (int)comType.InvokeMember("SecurityInfo",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SecurityItem});
        }

        public int SelectContentStream(int NewIndex)
        {
            return (int)comType.InvokeMember("SelectContentStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewIndex});
        }

        public int SelectDocument(int DocumentID)
        {
            return (int)comType.InvokeMember("SelectDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DocumentID});
        }

        public int SelectFont(int FontID)
        {
            return (int)comType.InvokeMember("SelectFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontID});
        }

        public int SelectImage(int ImageID)
        {
            return (int)comType.InvokeMember("SelectImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageID});
        }

        public int SelectPage(int PageNumber)
        {
            return (int)comType.InvokeMember("SelectPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PageNumber});
        }

        public int SelectRenderer(int RendererID)
        {
            return (int)comType.InvokeMember("SelectRenderer",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                RendererID});
        }

        public int SelectedDocument()
        {
            return (int)comType.InvokeMember("SelectedDocument",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SelectedFont()
        {
            return (int)comType.InvokeMember("SelectedFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SelectedImage()
        {
            return (int)comType.InvokeMember("SelectedImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SelectedPage()
        {
            return (int)comType.InvokeMember("SelectedPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SelectedRenderer()
        {
            return (int)comType.InvokeMember("SelectedRenderer",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SetActionURL(int ActionID, string NewURL)
        {
            return (int)comType.InvokeMember("SetActionURL",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ActionID, NewURL});
        }

        public int SetAnnotBorderColor(int Index, double Red, 
            double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetAnnotBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Red, Green, Blue});
        }

        public int SetAnnotBorderStyle(int Index, double Width, int Style, 
            double DashOn, double DashOff)
        {
            return (int)comType.InvokeMember("SetAnnotBorderStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Width, Style, DashOn, DashOff});
        }

        public int SetAnnotContents(int Index, string NewContents)
        {
            return (int)comType.InvokeMember("SetAnnotContents",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewContents});
        }

        public int SetAnnotDblProperty(int Index, int Tag, double NewValue)
        {
            return (int)comType.InvokeMember("SetAnnotDblProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag, NewValue});
        }

        public int SetAnnotIntProperty(int Index, int Tag, int NewValue)
        {
            return (int)comType.InvokeMember("SetAnnotIntProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag, NewValue});
        }

        public int SetAnnotOptional(int Index, int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("SetAnnotOptional",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, OptionalContentGroupID});
        }

        public int SetAnnotQuadPoints(int Index, int QuadNumber, 
            double X1, double Y1, double X2, double Y2, double X3, 
            double Y3, double X4, double Y4)
        {
            return (int)comType.InvokeMember("SetAnnotQuadPoints",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, QuadNumber, X1, Y1, X2, Y2, X3, Y3, X4, Y4});
        }

        public int SetAnnotRect(int Index, double Left, double Top, 
            double Width, double Height)
        {
            return (int)comType.InvokeMember("SetAnnotRect",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Left, Top, Width, Height});
        }

        public int SetAnnotStrProperty(int Index, int Tag, string NewValue)
        {
            return (int)comType.InvokeMember("SetAnnotStrProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag, NewValue});
        }

        public int SetAppendInputFromVariant(byte[] Source)
        {
            return (int)comType.InvokeMember("SetAppendInputFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source});
        }

        public int SetBaseURL(string NewBaseURL)
        {
            return (int)comType.InvokeMember("SetBaseURL",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewBaseURL});
        }

        public int SetBlendMode(int BlendMode)
        {
            return (int)comType.InvokeMember("SetBlendMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                BlendMode});
        }

        public int SetBreakString(string NewBreakString)
        {
            return (int)comType.InvokeMember("SetBreakString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewBreakString});
        }

        public int SetCSDictEPSG(int CSDictID, int NewEPSG)
        {
            return (int)comType.InvokeMember("SetCSDictEPSG",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CSDictID, NewEPSG});
        }

        public int SetCSDictType(int CSDictID, int NewDictType)
        {
            return (int)comType.InvokeMember("SetCSDictType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CSDictID, NewDictType});
        }

        public int SetCSDictWKT(int CSDictID, string NewWKT)
        {
            return (int)comType.InvokeMember("SetCSDictWKT",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CSDictID, NewWKT});
        }

        public int SetCairoFileName(string FileName)
        {
            return (int)comType.InvokeMember("SetCairoFileName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int SetCapturedPageOptional(int CaptureID, 
            int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("SetCapturedPageOptional",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CaptureID, OptionalContentGroupID});
        }

        public int SetCapturedPageTransparencyGroup(int CaptureID, int CS, 
            int Isolate, int Knockout)
        {
            return (int)comType.InvokeMember("SetCapturedPageTransparencyGroup",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CaptureID, CS, Isolate, Knockout});
        }

        public int SetCatalogInformation(string Key, string NewValue)
        {
            return (int)comType.InvokeMember("SetCatalogInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, NewValue});
        }

        public int SetCharWidth(int CharCode, int NewWidth)
        {
            return (int)comType.InvokeMember("SetCharWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CharCode, NewWidth});
        }

        public int SetClippingPath()
        {
            return (int)comType.InvokeMember("SetClippingPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SetClippingPathEvenOdd()
        {
            return (int)comType.InvokeMember("SetClippingPathEvenOdd",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SetCompatibility(int CompatibilityItem, 
            int CompatibilityMode)
        {
            return (int)comType.InvokeMember("SetCompatibility",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CompatibilityItem, CompatibilityMode});
        }

        public int SetContentStreamFromVariant(byte[] NewValue)
        {
            return (int)comType.InvokeMember("SetContentStreamFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewValue});
        }

        public int SetContentStreamOptional(int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("SetContentStreamOptional",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID});
        }

        public int SetCropBox(double Left, double Top, double Width, 
            double Height)
        {
            return (int)comType.InvokeMember("SetCropBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int SetCustomInformation(string Key, string NewValue)
        {
            return (int)comType.InvokeMember("SetCustomInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, NewValue});
        }

        public int SetCustomLineDash(string DashPattern, double DashPhase)
        {
            return (int)comType.InvokeMember("SetCustomLineDash",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DashPattern, DashPhase});
        }

        public int SetDPLRFileName(string FileName)
        {
            return (int)comType.InvokeMember("SetDPLRFileName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int SetDecodeMode(int NewDecodeMode)
        {
            return (int)comType.InvokeMember("SetDecodeMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewDecodeMode});
        }

        public int SetDestProperties(int DestID, int Zoom, int DestType, 
            double Left, double Top, double Right, double Bottom)
        {
            return (int)comType.InvokeMember("SetDestProperties",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestID, Zoom, DestType, Left, Top, Right, Bottom});
        }

        public int SetDestValue(int DestID, int ValueKey, double NewValue)
        {
            return (int)comType.InvokeMember("SetDestValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DestID, ValueKey, NewValue});
        }

        public int SetDocumentMetadata(string XMP)
        {
            return (int)comType.InvokeMember("SetDocumentMetadata",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XMP});
        }

        public int SetEmbeddedFileStrProperty(int Index, int Tag, 
            string NewValue)
        {
            return (int)comType.InvokeMember("SetEmbeddedFileStrProperty",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Tag, NewValue});
        }

        public int SetFillColor(double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetFillColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Red, Green, Blue});
        }

        public int SetFillColorCMYK(double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetFillColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                C, M, Y, K});
        }

        public int SetFillColorSep(string ColorName, double Tint)
        {
            return (int)comType.InvokeMember("SetFillColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, Tint});
        }

        public int SetFillShader(string ShaderName)
        {
            return (int)comType.InvokeMember("SetFillShader",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ShaderName});
        }

        public int SetFillTilingPattern(string PatternName)
        {
            return (int)comType.InvokeMember("SetFillTilingPattern",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PatternName});
        }

        public int SetFindImagesMode(int NewFindImagesMode)
        {
            return (int)comType.InvokeMember("SetFindImagesMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewFindImagesMode});
        }

        public int SetFontEncoding(int Encoding)
        {
            return (int)comType.InvokeMember("SetFontEncoding",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Encoding});
        }

        public int SetFontFlags(int Fixed, int Serif, int Symbolic, 
            int Script, int Italic, int AllCap, int SmallCap, int ForceBold)
        {
            return (int)comType.InvokeMember("SetFontFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Fixed, Serif, Symbolic, Script, Italic, AllCap, SmallCap, 
                ForceBold});
        }

        public int SetFormFieldAlignment(int Index, int Alignment)
        {
            return (int)comType.InvokeMember("SetFormFieldAlignment",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Alignment});
        }

        public int SetFormFieldAnnotFlags(int Index, int NewFlags)
        {
            return (int)comType.InvokeMember("SetFormFieldAnnotFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewFlags});
        }

        public int SetFormFieldAppearanceFromString(int Index, 
            string Source, int FontID, string FontReference)
        {
            return (int)comType.InvokeMember("SetFormFieldAppearanceFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Source, FontID, FontReference});
        }

        public int SetFormFieldBackgroundColor(int Index, double Red, 
            double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetFormFieldBackgroundColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Red, Green, Blue});
        }

        public int SetFormFieldBackgroundColorCMYK(int Index, double C, 
            double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetFormFieldBackgroundColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, C, M, Y, K});
        }

        public int SetFormFieldBackgroundColorGray(int Index, double Gray)
        {
            return (int)comType.InvokeMember("SetFormFieldBackgroundColorGray",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Gray});
        }

        public int SetFormFieldBackgroundColorSep(int Index, 
            string ColorName, double Tint)
        {
            return (int)comType.InvokeMember("SetFormFieldBackgroundColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ColorName, Tint});
        }

        public int SetFormFieldBorderColor(int Index, double Red, 
            double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetFormFieldBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Red, Green, Blue});
        }

        public int SetFormFieldBorderColorCMYK(int Index, double C, 
            double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetFormFieldBorderColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, C, M, Y, K});
        }

        public int SetFormFieldBorderColorGray(int Index, double Gray)
        {
            return (int)comType.InvokeMember("SetFormFieldBorderColorGray",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Gray});
        }

        public int SetFormFieldBorderColorSep(int Index, string ColorName, 
            double Tint)
        {
            return (int)comType.InvokeMember("SetFormFieldBorderColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ColorName, Tint});
        }

        public int SetFormFieldBorderStyle(int Index, double Width, 
            int Style, double DashOn, double DashOff)
        {
            return (int)comType.InvokeMember("SetFormFieldBorderStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Width, Style, DashOn, DashOff});
        }

        public int SetFormFieldBounds(int Index, double Left, double Top, 
            double Width, double Height)
        {
            return (int)comType.InvokeMember("SetFormFieldBounds",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Left, Top, Width, Height});
        }

        public int SetFormFieldCalcOrder(int Index, int Order)
        {
            return (int)comType.InvokeMember("SetFormFieldCalcOrder",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Order});
        }

        public int SetFormFieldCaption(int Index, string NewCaption)
        {
            return (int)comType.InvokeMember("SetFormFieldCaption",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewCaption});
        }

        public int SetFormFieldCheckStyle(int Index, int CheckStyle, 
            int Position)
        {
            return (int)comType.InvokeMember("SetFormFieldCheckStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, CheckStyle, Position});
        }

        public int SetFormFieldChildTitle(int Index, string NewTitle)
        {
            return (int)comType.InvokeMember("SetFormFieldChildTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewTitle});
        }

        public int SetFormFieldChoiceSub(int Index, int SubIndex, 
            string SubName, string DisplayName)
        {
            return (int)comType.InvokeMember("SetFormFieldChoiceSub",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, SubIndex, SubName, DisplayName});
        }

        public int SetFormFieldChoiceType(int Index, int ChoiceType)
        {
            return (int)comType.InvokeMember("SetFormFieldChoiceType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ChoiceType});
        }

        public int SetFormFieldColor(int Index, double Red, double Green, 
            double Blue)
        {
            return (int)comType.InvokeMember("SetFormFieldColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Red, Green, Blue});
        }

        public int SetFormFieldColorCMYK(int Index, double C, double M, 
            double Y, double K)
        {
            return (int)comType.InvokeMember("SetFormFieldColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, C, M, Y, K});
        }

        public int SetFormFieldColorSep(int Index, string ColorName, 
            double Tint)
        {
            return (int)comType.InvokeMember("SetFormFieldColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ColorName, Tint});
        }

        public int SetFormFieldComb(int Index, int Comb)
        {
            return (int)comType.InvokeMember("SetFormFieldComb",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Comb});
        }

        public int SetFormFieldCustomDict(int Index, string Key, 
            string NewValue, int StorageType, int Options)
        {
            return (int)comType.InvokeMember("SetFormFieldCustomDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Key, NewValue, StorageType, Options});
        }

        public int SetFormFieldDefaultValue(int Index, 
            string NewDefaultValue)
        {
            return (int)comType.InvokeMember("SetFormFieldDefaultValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewDefaultValue});
        }

        public int SetFormFieldDefaultValueEx(int Index, 
            string NewDefaultValue, int Options)
        {
            return (int)comType.InvokeMember("SetFormFieldDefaultValueEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewDefaultValue, Options});
        }

        public int SetFormFieldDescription(int Index, string NewDescription)
        {
            return (int)comType.InvokeMember("SetFormFieldDescription",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewDescription});
        }

        public int SetFormFieldFlags(int Index, int NewFlags)
        {
            return (int)comType.InvokeMember("SetFormFieldFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewFlags});
        }

        public int SetFormFieldFont(int Index, int FontIndex)
        {
            return (int)comType.InvokeMember("SetFormFieldFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, FontIndex});
        }

        public int SetFormFieldFormatMode(int NewFormatMode)
        {
            return (int)comType.InvokeMember("SetFormFieldFormatMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewFormatMode});
        }

        public int SetFormFieldHighlightMode(int Index, int NewMode)
        {
            return (int)comType.InvokeMember("SetFormFieldHighlightMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewMode});
        }

        public int SetFormFieldIcon(int Index, int IconType, int CaptureID)
        {
            return (int)comType.InvokeMember("SetFormFieldIcon",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, IconType, CaptureID});
        }

        public int SetFormFieldIconStyle(int Index, int Placement, 
            int Scale, int ScaleType, int HorizontalShift, 
            int VerticalShift)
        {
            return (int)comType.InvokeMember("SetFormFieldIconStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Placement, Scale, ScaleType, HorizontalShift, 
                VerticalShift});
        }

        public int SetFormFieldLockAction(int Index, int LockAction, 
            string FieldList, string Delimiter)
        {
            return (int)comType.InvokeMember("SetFormFieldLockAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, LockAction, FieldList, Delimiter});
        }

        public int SetFormFieldMaxLen(int Index, int NewMaxLen)
        {
            return (int)comType.InvokeMember("SetFormFieldMaxLen",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewMaxLen});
        }

        public int SetFormFieldMetadata(int Index, string XMP)
        {
            return (int)comType.InvokeMember("SetFormFieldMetadata",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, XMP});
        }

        public int SetFormFieldNoExport(int Index, int NoExport)
        {
            return (int)comType.InvokeMember("SetFormFieldNoExport",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NoExport});
        }

        public int SetFormFieldOptional(int Index, 
            int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("SetFormFieldOptional",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, OptionalContentGroupID});
        }

        public int SetFormFieldPage(int Index, int NewPage)
        {
            return (int)comType.InvokeMember("SetFormFieldPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewPage});
        }

        public int SetFormFieldPrintable(int Index, int Printable)
        {
            return (int)comType.InvokeMember("SetFormFieldPrintable",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Printable});
        }

        public int SetFormFieldReadOnly(int Index, int ReadOnly)
        {
            return (int)comType.InvokeMember("SetFormFieldReadOnly",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ReadOnly});
        }

        public int SetFormFieldRequired(int Index, int Required)
        {
            return (int)comType.InvokeMember("SetFormFieldRequired",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Required});
        }

        public int SetFormFieldResetAction(int Index, string ActionType)
        {
            return (int)comType.InvokeMember("SetFormFieldResetAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType});
        }

        public int SetFormFieldRichTextString(int Index, string Key, 
            string NewValue)
        {
            return (int)comType.InvokeMember("SetFormFieldRichTextString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Key, NewValue});
        }

        public int SetFormFieldRotation(int Index, int Angle)
        {
            return (int)comType.InvokeMember("SetFormFieldRotation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Angle});
        }

        public int SetFormFieldSignatureImage(int Index, int ImageID, 
            int Options)
        {
            return (int)comType.InvokeMember("SetFormFieldSignatureImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ImageID, Options});
        }

        public int SetFormFieldStandardFont(int Index, int StandardFontID)
        {
            return (int)comType.InvokeMember("SetFormFieldStandardFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, StandardFontID});
        }

        public int SetFormFieldSubmitAction(int Index, string ActionType, 
            string Link)
        {
            return (int)comType.InvokeMember("SetFormFieldSubmitAction",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType, Link});
        }

        public int SetFormFieldSubmitActionEx(int Index, 
            string ActionType, string Link, int Flags)
        {
            return (int)comType.InvokeMember("SetFormFieldSubmitActionEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, ActionType, Link, Flags});
        }

        public int SetFormFieldTabOrder(int Index, int Order)
        {
            return (int)comType.InvokeMember("SetFormFieldTabOrder",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Order});
        }

        public int SetFormFieldTextFlags(int Index, int Multiline, 
            int Password, int FileSelect, int DoNotSpellCheck, 
            int DoNotScroll)
        {
            return (int)comType.InvokeMember("SetFormFieldTextFlags",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Multiline, Password, FileSelect, DoNotSpellCheck, 
                DoNotScroll});
        }

        public int SetFormFieldTextSize(int Index, double NewTextSize)
        {
            return (int)comType.InvokeMember("SetFormFieldTextSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewTextSize});
        }

        public int SetFormFieldTitle(int Index, string NewTitle)
        {
            return (int)comType.InvokeMember("SetFormFieldTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewTitle});
        }

        public int SetFormFieldValue(int Index, string NewValue)
        {
            return (int)comType.InvokeMember("SetFormFieldValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewValue});
        }

        public int SetFormFieldValueByTitle(string Title, string NewValue)
        {
            return (int)comType.InvokeMember("SetFormFieldValueByTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Title, NewValue});
        }

        public int SetFormFieldValueEx(int Index, string NewValue, 
            int Options)
        {
            return (int)comType.InvokeMember("SetFormFieldValueEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, NewValue, Options});
        }

        public int SetFormFieldVisible(int Index, int Visible)
        {
            return (int)comType.InvokeMember("SetFormFieldVisible",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Visible});
        }

        public int SetGDIPlusFileName(string DLLFileName)
        {
            return (int)comType.InvokeMember("SetGDIPlusFileName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DLLFileName});
        }

        public int SetGDIPlusOptions(int OptionID, int NewValue)
        {
            return (int)comType.InvokeMember("SetGDIPlusOptions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionID, NewValue});
        }

        public int SetHTMLBoldFont(string FontSet, int FontID)
        {
            return (int)comType.InvokeMember("SetHTMLBoldFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontSet, FontID});
        }

        public int SetHTMLBoldItalicFont(string FontSet, int FontID)
        {
            return (int)comType.InvokeMember("SetHTMLBoldItalicFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontSet, FontID});
        }

        public int SetHTMLItalicFont(string FontSet, int FontID)
        {
            return (int)comType.InvokeMember("SetHTMLItalicFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontSet, FontID});
        }

        public int SetHTMLNormalFont(string FontSet, int FontID)
        {
            return (int)comType.InvokeMember("SetHTMLNormalFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FontSet, FontID});
        }

        public int SetHeaderCommentsFromVariant(byte[] Source)
        {
            return (int)comType.InvokeMember("SetHeaderCommentsFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source});
        }

        public int SetImageAsMask(int MaskType)
        {
            return (int)comType.InvokeMember("SetImageAsMask",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MaskType});
        }

        public int SetImageMask(double FromRed, double FromGreen, 
            double FromBlue, double ToRed, double ToGreen, double ToBlue)
        {
            return (int)comType.InvokeMember("SetImageMask",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FromRed, FromGreen, FromBlue, ToRed, ToGreen, ToBlue});
        }

        public int SetImageMaskCMYK(double FromC, double FromM, 
            double FromY, double FromK, double ToC, double ToM, 
            double ToY, double ToK)
        {
            return (int)comType.InvokeMember("SetImageMaskCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FromC, FromM, FromY, FromK, ToC, ToM, ToY, ToK});
        }

        public int SetImageMaskFromImage(int ImageID)
        {
            return (int)comType.InvokeMember("SetImageMaskFromImage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ImageID});
        }

        public int SetImageOptional(int OptionalContentGroupID)
        {
            return (int)comType.InvokeMember("SetImageOptional",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID});
        }

        public int SetImageResolution(int Horizontal, int Vertical, 
            int Units)
        {
            return (int)comType.InvokeMember("SetImageResolution",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Horizontal, Vertical, Units});
        }

        public int SetInformation(int Key, string NewValue)
        {
            return (int)comType.InvokeMember("SetInformation",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, NewValue});
        }

        public int SetJPEGQuality(int Quality)
        {
            return (int)comType.InvokeMember("SetJPEGQuality",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Quality});
        }

        public int SetJavaScriptMode(int JSMode)
        {
            return (int)comType.InvokeMember("SetJavaScriptMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                JSMode});
        }

        public int SetKerning(string CharPair, int Adjustment)
        {
            return (int)comType.InvokeMember("SetKerning",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CharPair, Adjustment});
        }

        public int SetLineCap(int LineCap)
        {
            return (int)comType.InvokeMember("SetLineCap",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                LineCap});
        }

        public int SetLineColor(double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetLineColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Red, Green, Blue});
        }

        public int SetLineColorCMYK(double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetLineColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                C, M, Y, K});
        }

        public int SetLineColorSep(string ColorName, double Tint)
        {
            return (int)comType.InvokeMember("SetLineColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, Tint});
        }

        public int SetLineDash(double DashOn, double DashOff)
        {
            return (int)comType.InvokeMember("SetLineDash",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DashOn, DashOff});
        }

        public int SetLineDashEx(string DashValues)
        {
            return (int)comType.InvokeMember("SetLineDashEx",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DashValues});
        }

        public int SetLineJoin(int LineJoin)
        {
            return (int)comType.InvokeMember("SetLineJoin",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                LineJoin});
        }

        public int SetLineShader(string ShaderName)
        {
            return (int)comType.InvokeMember("SetLineShader",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ShaderName});
        }

        public int SetLineWidth(double LineWidth)
        {
            return (int)comType.InvokeMember("SetLineWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                LineWidth});
        }

        public int SetMarkupAnnotStyle(int Index, double Red, 
            double Green, double Blue, double Transparency)
        {
            return (int)comType.InvokeMember("SetMarkupAnnotStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index, Red, Green, Blue, Transparency});
        }

        public int SetMeasureDictBoundsCount(int MeasureDictID, 
            int NewCount)
        {
            return (int)comType.InvokeMember("SetMeasureDictBoundsCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, NewCount});
        }

        public int SetMeasureDictBoundsItem(int MeasureDictID, 
            int ItemIndex, double NewValue)
        {
            return (int)comType.InvokeMember("SetMeasureDictBoundsItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, ItemIndex, NewValue});
        }

        public int SetMeasureDictCoordinateSystem(int MeasureDictID, 
            int CoordinateSystemID)
        {
            return (int)comType.InvokeMember("SetMeasureDictCoordinateSystem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, CoordinateSystemID});
        }

        public int SetMeasureDictGPTSCount(int MeasureDictID, int NewCount)
        {
            return (int)comType.InvokeMember("SetMeasureDictGPTSCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, NewCount});
        }

        public int SetMeasureDictGPTSItem(int MeasureDictID, 
            int ItemIndex, double NewValue)
        {
            return (int)comType.InvokeMember("SetMeasureDictGPTSItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, ItemIndex, NewValue});
        }

        public int SetMeasureDictLPTSCount(int MeasureDictID, int NewCount)
        {
            return (int)comType.InvokeMember("SetMeasureDictLPTSCount",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, NewCount});
        }

        public int SetMeasureDictLPTSItem(int MeasureDictID, 
            int ItemIndex, double NewValue)
        {
            return (int)comType.InvokeMember("SetMeasureDictLPTSItem",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, ItemIndex, NewValue});
        }

        public int SetMeasureDictPDU(int MeasureDictID, int LinearUnit, 
            int AreaUnit, int AngularUnit)
        {
            return (int)comType.InvokeMember("SetMeasureDictPDU",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasureDictID, LinearUnit, AreaUnit, AngularUnit});
        }

        public int SetMeasurementUnits(int MeasurementUnits)
        {
            return (int)comType.InvokeMember("SetMeasurementUnits",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MeasurementUnits});
        }

        public int SetMetafileMode(int Mode)
        {
            return (int)comType.InvokeMember("SetMetafileMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Mode});
        }

        public int SetNeedAppearances(int NewValue)
        {
            return (int)comType.InvokeMember("SetNeedAppearances",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewValue});
        }

        public int SetObjectFromVariant(int ObjectNumber, byte[] NewValue)
        {
            return (int)comType.InvokeMember("SetObjectFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ObjectNumber, NewValue});
        }

        public int SetOpenActionDestination(int OpenPage, int Zoom)
        {
            return (int)comType.InvokeMember("SetOpenActionDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OpenPage, Zoom});
        }

        public int SetOpenActionDestinationFull(int OpenPage, int Zoom, 
            int DestType, double Left, double Top, double Right, 
            double Bottom)
        {
            return (int)comType.InvokeMember("SetOpenActionDestinationFull",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OpenPage, Zoom, DestType, Left, Top, Right, Bottom});
        }

        public int SetOpenActionJavaScript(string JavaScript)
        {
            return (int)comType.InvokeMember("SetOpenActionJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                JavaScript});
        }

        public int SetOpenActionMenu(string MenuItem)
        {
            return (int)comType.InvokeMember("SetOpenActionMenu",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MenuItem});
        }

        public int SetOptionalContentConfigLocked(
            int OptionalContentConfigID, int OptionalContentGroupID, 
            int NewLocked)
        {
            return (int)comType.InvokeMember("SetOptionalContentConfigLocked",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, OptionalContentGroupID, NewLocked});
        }

        public int SetOptionalContentConfigState(
            int OptionalContentConfigID, int OptionalContentGroupID, 
            int NewState)
        {
            return (int)comType.InvokeMember("SetOptionalContentConfigState",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentConfigID, OptionalContentGroupID, NewState});
        }

        public int SetOptionalContentGroupName(int OptionalContentGroupID, 
            string NewGroupName)
        {
            return (int)comType.InvokeMember("SetOptionalContentGroupName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID, NewGroupName});
        }

        public int SetOptionalContentGroupPrintable(
            int OptionalContentGroupID, int Printable)
        {
            return (int)comType.InvokeMember("SetOptionalContentGroupPrintable",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID, Printable});
        }

        public int SetOptionalContentGroupVisible(
            int OptionalContentGroupID, int Visible)
        {
            return (int)comType.InvokeMember("SetOptionalContentGroupVisible",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionalContentGroupID, Visible});
        }

        public int SetOrigin(int Origin)
        {
            return (int)comType.InvokeMember("SetOrigin",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Origin});
        }

        public int SetOutlineColor(int OutlineID, double Red, 
            double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetOutlineColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, Red, Green, Blue});
        }

        public int SetOutlineDestination(int OutlineID, int DestPage, 
            double DestPosition)
        {
            return (int)comType.InvokeMember("SetOutlineDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, DestPage, DestPosition});
        }

        public int SetOutlineDestinationFull(int OutlineID, int DestPage, 
            int Zoom, int DestType, double Left, double Top, double Right, 
            double Bottom)
        {
            return (int)comType.InvokeMember("SetOutlineDestinationFull",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, DestPage, Zoom, DestType, Left, Top, Right, 
                Bottom});
        }

        public int SetOutlineDestinationZoom(int OutlineID, int DestPage, 
            double DestPosition, int Zoom)
        {
            return (int)comType.InvokeMember("SetOutlineDestinationZoom",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, DestPage, DestPosition, Zoom});
        }

        public int SetOutlineJavaScript(int OutlineID, string JavaScript)
        {
            return (int)comType.InvokeMember("SetOutlineJavaScript",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, JavaScript});
        }

        public int SetOutlineNamedDestination(int OutlineID, 
            string DestName)
        {
            return (int)comType.InvokeMember("SetOutlineNamedDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, DestName});
        }

        public int SetOutlineOpenFile(int OutlineID, string FileName)
        {
            return (int)comType.InvokeMember("SetOutlineOpenFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, FileName});
        }

        public int SetOutlineRemoteDestination(int OutlineID, 
            string FileName, int OpenPage, int Zoom, int DestType, 
            double PntLeft, double PntTop, double PntRight, 
            double PntBottom, int NewWindow)
        {
            return (int)comType.InvokeMember("SetOutlineRemoteDestination",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, FileName, OpenPage, Zoom, DestType, PntLeft, 
                PntTop, PntRight, PntBottom, NewWindow});
        }

        public int SetOutlineStyle(int OutlineID, int SetItalic, 
            int SetBold)
        {
            return (int)comType.InvokeMember("SetOutlineStyle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, SetItalic, SetBold});
        }

        public int SetOutlineTitle(int OutlineID, string NewTitle)
        {
            return (int)comType.InvokeMember("SetOutlineTitle",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, NewTitle});
        }

        public int SetOutlineWebLink(int OutlineID, string Link)
        {
            return (int)comType.InvokeMember("SetOutlineWebLink",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OutlineID, Link});
        }

        public int SetOverprint(int StrokingOverprint, int OtherOverprint, 
            int OverprintMode)
        {
            return (int)comType.InvokeMember("SetOverprint",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StrokingOverprint, OtherOverprint, OverprintMode});
        }

        public int SetPDFAMode(int NewMode)
        {
            return (int)comType.InvokeMember("SetPDFAMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewMode});
        }

        public int SetPDFiumFileName(string FileName)
        {
            return (int)comType.InvokeMember("SetPDFiumFileName",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int SetPNGTransparencyColor(int RedByte, int GreenByte, 
            int BlueByte)
        {
            return (int)comType.InvokeMember("SetPNGTransparencyColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                RedByte, GreenByte, BlueByte});
        }

        public int SetPageActionMenu(string MenuItem)
        {
            return (int)comType.InvokeMember("SetPageActionMenu",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                MenuItem});
        }

        public int SetPageBox(int BoxType, double Left, double Top, 
            double Width, double Height)
        {
            return (int)comType.InvokeMember("SetPageBox",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                BoxType, Left, Top, Width, Height});
        }

        public int SetPageContentFromVariant(byte[] NewValue)
        {
            return (int)comType.InvokeMember("SetPageContentFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewValue});
        }

        public int SetPageDimensions(double NewPageWidth, 
            double NewPageHeight)
        {
            return (int)comType.InvokeMember("SetPageDimensions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewPageWidth, NewPageHeight});
        }

        public int SetPageLayout(int NewPageLayout)
        {
            return (int)comType.InvokeMember("SetPageLayout",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewPageLayout});
        }

        public int SetPageMetadata(string XMP)
        {
            return (int)comType.InvokeMember("SetPageMetadata",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XMP});
        }

        public int SetPageMode(int NewPageMode)
        {
            return (int)comType.InvokeMember("SetPageMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewPageMode});
        }

        public int SetPageSize(string PaperName)
        {
            return (int)comType.InvokeMember("SetPageSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                PaperName});
        }

        public int SetPageThumbnail()
        {
            return (int)comType.InvokeMember("SetPageThumbnail",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int SetPageTransparencyGroup(int CS, int Isolate, 
            int Knockout)
        {
            return (int)comType.InvokeMember("SetPageTransparencyGroup",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CS, Isolate, Knockout});
        }

        public int SetPageUserUnit(double UserUnit)
        {
            return (int)comType.InvokeMember("SetPageUserUnit",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                UserUnit});
        }

        public int SetPrecision(int NewPrecision)
        {
            return (int)comType.InvokeMember("SetPrecision",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewPrecision});
        }

        public int SetPrinterDevModeFromVariant(byte[] Source)
        {
            return (int)comType.InvokeMember("SetPrinterDevModeFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Source});
        }

        public int SetRenderArea(double Left, double Top, double Width, 
            double Height)
        {
            return (int)comType.InvokeMember("SetRenderArea",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int SetRenderCropType(int NewCropType)
        {
            return (int)comType.InvokeMember("SetRenderCropType",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewCropType});
        }

        public int SetRenderDCErasePage(int NewErasePage)
        {
            return (int)comType.InvokeMember("SetRenderDCErasePage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewErasePage});
        }

        public int SetRenderDCOffset(int NewOffsetX, int NewOffsetY)
        {
            return (int)comType.InvokeMember("SetRenderDCOffset",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewOffsetX, NewOffsetY});
        }

        public int SetRenderOptions(int OptionID, int NewValue)
        {
            return (int)comType.InvokeMember("SetRenderOptions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionID, NewValue});
        }

        public int SetRenderScale(double NewScale)
        {
            return (int)comType.InvokeMember("SetRenderScale",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewScale});
        }

        public int SetScale(double NewScale)
        {
            return (int)comType.InvokeMember("SetScale",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewScale});
        }

        public int SetSignProcessAppearanceFromString(int SignProcessID, 
            string LayerName, string Source)
        {
            return (int)comType.InvokeMember("SetSignProcessAppearanceFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, LayerName, Source});
        }

        public int SetSignProcessCustomDict(int SignProcessID, string Key, 
            string NewValue, int StorageType)
        {
            return (int)comType.InvokeMember("SetSignProcessCustomDict",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, Key, NewValue, StorageType});
        }

        public int SetSignProcessCustomSubFilter(int SignProcessID, 
            string SubFilterStr)
        {
            return (int)comType.InvokeMember("SetSignProcessCustomSubFilter",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, SubFilterStr});
        }

        public int SetSignProcessField(int SignProcessID, 
            string SignatureFieldName)
        {
            return (int)comType.InvokeMember("SetSignProcessField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, SignatureFieldName});
        }

        public int SetSignProcessFieldBounds(int SignProcessID, 
            double Left, double Top, double Width, double Height)
        {
            return (int)comType.InvokeMember("SetSignProcessFieldBounds",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, Left, Top, Width, Height});
        }

        public int SetSignProcessFieldImageFromFile(int SignProcessID, 
            string ImageFileName, int Options)
        {
            return (int)comType.InvokeMember("SetSignProcessFieldImageFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, ImageFileName, Options});
        }

        public int SetSignProcessFieldImageFromString(int SignProcessID, 
            string Source, int Options)
        {
            return (int)comType.InvokeMember("SetSignProcessFieldImageFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, Source, Options});
        }

        public int SetSignProcessFieldLocked(int SignProcessID, 
            int LockFieldAfterSign)
        {
            return (int)comType.InvokeMember("SetSignProcessFieldLocked",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, LockFieldAfterSign});
        }

        public int SetSignProcessFieldMetadata(int SignProcessID, 
            string XMP)
        {
            return (int)comType.InvokeMember("SetSignProcessFieldMetadata",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, XMP});
        }

        public int SetSignProcessFieldPage(int SignProcessID, 
            int SignaturePage)
        {
            return (int)comType.InvokeMember("SetSignProcessFieldPage",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, SignaturePage});
        }

        public int SetSignProcessImageLayer(int SignProcessID, 
            string LayerName)
        {
            return (int)comType.InvokeMember("SetSignProcessImageLayer",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, LayerName});
        }

        public int SetSignProcessInfo(int SignProcessID, string Reason, 
            string Location, string ContactInfo)
        {
            return (int)comType.InvokeMember("SetSignProcessInfo",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, Reason, Location, ContactInfo});
        }

        public int SetSignProcessKeyset(int SignProcessID, int KeysetID)
        {
            return (int)comType.InvokeMember("SetSignProcessKeyset",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, KeysetID});
        }

        public int SetSignProcessOptions(int SignProcessID, int OptionID, 
            int OptionValue)
        {
            return (int)comType.InvokeMember("SetSignProcessOptions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, OptionID, OptionValue});
        }

        public int SetSignProcessPFXFromFile(int SignProcessID, 
            string PFXFileName, string PFXPassword)
        {
            return (int)comType.InvokeMember("SetSignProcessPFXFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, PFXFileName, PFXPassword});
        }

        public int SetSignProcessPFXFromString(int SignProcessID, 
            string Source, string PFXPassword)
        {
            return (int)comType.InvokeMember("SetSignProcessPFXFromString",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, Source, PFXPassword});
        }

        public int SetSignProcessPassthrough(int SignProcessID, 
            int SignatureLength)
        {
            return (int)comType.InvokeMember("SetSignProcessPassthrough",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, SignatureLength});
        }

        public int SetSignProcessSubFilter(int SignProcessID, int SubFilter)
        {
            return (int)comType.InvokeMember("SetSignProcessSubFilter",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SignProcessID, SubFilter});
        }

        public int SetTabOrderMode(string Mode)
        {
            return (int)comType.InvokeMember("SetTabOrderMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Mode});
        }

        public int SetTableBorderColor(int TableID, int BorderIndex, 
            double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetTableBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, BorderIndex, Red, Green, Blue});
        }

        public int SetTableBorderColorCMYK(int TableID, int BorderIndex, 
            double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetTableBorderColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, BorderIndex, C, M, Y, K});
        }

        public int SetTableBorderWidth(int TableID, int BorderIndex, 
            double NewWidth)
        {
            return (int)comType.InvokeMember("SetTableBorderWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, BorderIndex, NewWidth});
        }

        public int SetTableCellAlignment(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, 
            int NewCellAlignment)
        {
            return (int)comType.InvokeMember("SetTableCellAlignment",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, 
                NewCellAlignment});
        }

        public int SetTableCellBackgroundColor(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, double Red, 
            double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetTableCellBackgroundColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, Red, 
                Green, Blue});
        }

        public int SetTableCellBackgroundColorCMYK(int TableID, 
            int FirstRow, int FirstColumn, int LastRow, int LastColumn, 
            double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetTableCellBackgroundColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, C, M, 
                Y, K});
        }

        public int SetTableCellBorderColor(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, int BorderIndex, 
            double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetTableCellBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, 
                BorderIndex, Red, Green, Blue});
        }

        public int SetTableCellBorderColorCMYK(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, int BorderIndex, 
            double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetTableCellBorderColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, 
                BorderIndex, C, M, Y, K});
        }

        public int SetTableCellBorderWidth(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, int BorderIndex, 
            double NewWidth)
        {
            return (int)comType.InvokeMember("SetTableCellBorderWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, 
                BorderIndex, NewWidth});
        }

        public int SetTableCellContent(int TableID, int RowNumber, 
            int ColumnNumber, string HTMLText)
        {
            return (int)comType.InvokeMember("SetTableCellContent",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, RowNumber, ColumnNumber, HTMLText});
        }

        public int SetTableCellPadding(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, int BorderIndex, 
            double NewPadding)
        {
            return (int)comType.InvokeMember("SetTableCellPadding",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, 
                BorderIndex, NewPadding});
        }

        public int SetTableCellTextColor(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, double Red, 
            double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetTableCellTextColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, Red, 
                Green, Blue});
        }

        public int SetTableCellTextColorCMYK(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, double C, 
            double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetTableCellTextColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, C, M, 
                Y, K});
        }

        public int SetTableCellTextSize(int TableID, int FirstRow, 
            int FirstColumn, int LastRow, int LastColumn, 
            double NewTextSize)
        {
            return (int)comType.InvokeMember("SetTableCellTextSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, FirstColumn, LastRow, LastColumn, 
                NewTextSize});
        }

        public int SetTableColumnWidth(int TableID, int FirstColumn, 
            int LastColumn, double NewWidth)
        {
            return (int)comType.InvokeMember("SetTableColumnWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstColumn, LastColumn, NewWidth});
        }

        public int SetTableRowHeight(int TableID, int FirstRow, 
            int LastRow, double NewHeight)
        {
            return (int)comType.InvokeMember("SetTableRowHeight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, FirstRow, LastRow, NewHeight});
        }

        public int SetTableThinBorders(int TableID, int ThinBorders, 
            double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetTableThinBorders",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, ThinBorders, Red, Green, Blue});
        }

        public int SetTableThinBordersCMYK(int TableID, int ThinBorders, 
            double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetTableThinBordersCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TableID, ThinBorders, C, M, Y, K});
        }

        public int SetTempFile(string FileName)
        {
            return (int)comType.InvokeMember("SetTempFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                FileName});
        }

        public int SetTempPath(string NewPath)
        {
            return (int)comType.InvokeMember("SetTempPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewPath});
        }

        public int SetTextAlign(int TextAlign)
        {
            return (int)comType.InvokeMember("SetTextAlign",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextAlign});
        }

        public int SetTextCharSpacing(double CharSpacing)
        {
            return (int)comType.InvokeMember("SetTextCharSpacing",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CharSpacing});
        }

        public int SetTextColor(double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetTextColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Red, Green, Blue});
        }

        public int SetTextColorCMYK(double C, double M, double Y, double K)
        {
            return (int)comType.InvokeMember("SetTextColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                C, M, Y, K});
        }

        public int SetTextColorSep(string ColorName, double Tint)
        {
            return (int)comType.InvokeMember("SetTextColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, Tint});
        }

        public int SetTextExtractionArea(double Left, double Top, 
            double Width, double Height)
        {
            return (int)comType.InvokeMember("SetTextExtractionArea",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Left, Top, Width, Height});
        }

        public int SetTextExtractionOptions(int OptionID, int NewValue)
        {
            return (int)comType.InvokeMember("SetTextExtractionOptions",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                OptionID, NewValue});
        }

        public int SetTextExtractionScaling(int Options, 
            double Horizontal, double Vertical)
        {
            return (int)comType.InvokeMember("SetTextExtractionScaling",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options, Horizontal, Vertical});
        }

        public int SetTextExtractionWordGap(double NewWordGap)
        {
            return (int)comType.InvokeMember("SetTextExtractionWordGap",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewWordGap});
        }

        public int SetTextHighlight(int Highlight)
        {
            return (int)comType.InvokeMember("SetTextHighlight",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Highlight});
        }

        public int SetTextHighlightColor(double Red, double Green, 
            double Blue)
        {
            return (int)comType.InvokeMember("SetTextHighlightColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Red, Green, Blue});
        }

        public int SetTextHighlightColorCMYK(double C, double M, double Y, 
            double K)
        {
            return (int)comType.InvokeMember("SetTextHighlightColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                C, M, Y, K});
        }

        public int SetTextHighlightColorSep(string ColorName, double Tint)
        {
            return (int)comType.InvokeMember("SetTextHighlightColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, Tint});
        }

        public int SetTextMode(int TextMode)
        {
            return (int)comType.InvokeMember("SetTextMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextMode});
        }

        public int SetTextRise(double Rise)
        {
            return (int)comType.InvokeMember("SetTextRise",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Rise});
        }

        public int SetTextScaling(double ScalePercentage)
        {
            return (int)comType.InvokeMember("SetTextScaling",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ScalePercentage});
        }

        public int SetTextShader(string ShaderName)
        {
            return (int)comType.InvokeMember("SetTextShader",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ShaderName});
        }

        public int SetTextSize(double TextSize)
        {
            return (int)comType.InvokeMember("SetTextSize",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                TextSize});
        }

        public int SetTextSpacing(double Spacing)
        {
            return (int)comType.InvokeMember("SetTextSpacing",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Spacing});
        }

        public int SetTextUnderline(int Underline)
        {
            return (int)comType.InvokeMember("SetTextUnderline",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Underline});
        }

        public int SetTextUnderlineColor(double Red, double Green, 
            double Blue)
        {
            return (int)comType.InvokeMember("SetTextUnderlineColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Red, Green, Blue});
        }

        public int SetTextUnderlineColorCMYK(double C, double M, double Y, 
            double K)
        {
            return (int)comType.InvokeMember("SetTextUnderlineColorCMYK",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                C, M, Y, K});
        }

        public int SetTextUnderlineColorSep(string ColorName, double Tint)
        {
            return (int)comType.InvokeMember("SetTextUnderlineColorSep",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                ColorName, Tint});
        }

        public int SetTextUnderlineCustomDash(string DashPattern, 
            double DashPhase)
        {
            return (int)comType.InvokeMember("SetTextUnderlineCustomDash",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DashPattern, DashPhase});
        }

        public int SetTextUnderlineDash(double DashOn, double DashOff)
        {
            return (int)comType.InvokeMember("SetTextUnderlineDash",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                DashOn, DashOff});
        }

        public int SetTextUnderlineDistance(double UnderlineDistance)
        {
            return (int)comType.InvokeMember("SetTextUnderlineDistance",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                UnderlineDistance});
        }

        public int SetTextUnderlineWidth(double UnderlineWidth)
        {
            return (int)comType.InvokeMember("SetTextUnderlineWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                UnderlineWidth});
        }

        public int SetTextWordSpacing(double WordSpacing)
        {
            return (int)comType.InvokeMember("SetTextWordSpacing",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                WordSpacing});
        }

        public int SetTransparency(int Transparency)
        {
            return (int)comType.InvokeMember("SetTransparency",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Transparency});
        }

        public int SetUpdateMode(int NewUpdateMode)
        {
            return (int)comType.InvokeMember("SetUpdateMode",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                NewUpdateMode});
        }

        public int SetViewerPreferences(int Option, int NewValue)
        {
            return (int)comType.InvokeMember("SetViewerPreferences",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Option, NewValue});
        }

        public int SetXFAFormFieldAccess(string XFAFieldName, int NewAccess)
        {
            return (int)comType.InvokeMember("SetXFAFormFieldAccess",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XFAFieldName, NewAccess});
        }

        public int SetXFAFormFieldBorderColor(string XFAFieldName, 
            double Red, double Green, double Blue)
        {
            return (int)comType.InvokeMember("SetXFAFormFieldBorderColor",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XFAFieldName, Red, Green, Blue});
        }

        public int SetXFAFormFieldBorderPresence(string XFAFieldName, 
            int NewPresence)
        {
            return (int)comType.InvokeMember("SetXFAFormFieldBorderPresence",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XFAFieldName, NewPresence});
        }

        public int SetXFAFormFieldBorderWidth(string XFAFieldName, 
            double BorderWidth)
        {
            return (int)comType.InvokeMember("SetXFAFormFieldBorderWidth",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XFAFieldName, BorderWidth});
        }

        public int SetXFAFormFieldValue(string XFAFieldName, 
            string NewValue)
        {
            return (int)comType.InvokeMember("SetXFAFormFieldValue",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                XFAFieldName, NewValue});
        }

        public int SetupCustomPrinter(string CustomPrinterName, 
            int Setting, int NewValue)
        {
            return (int)comType.InvokeMember("SetupCustomPrinter",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                CustomPrinterName, Setting, NewValue});
        }

        public int SignFile(string InputFileName, string OpenPassword, 
            string SignatureFieldName, string OutputFileName, 
            string PFXFileName, string PFXPassword, string Reason, 
            string Location, string ContactInfo)
        {
            return (int)comType.InvokeMember("SignFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, OpenPassword, SignatureFieldName, 
                OutputFileName, PFXFileName, PFXPassword, Reason, 
                Location, ContactInfo});
        }

        public int SplitPageText(int Options)
        {
            return (int)comType.InvokeMember("SplitPageText",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Options});
        }

        public int StartPath(double StartX, double StartY)
        {
            return (int)comType.InvokeMember("StartPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                StartX, StartY});
        }

        public int StoreCustomDataFromFile(string Key, string FileName, 
            int Location, int Options)
        {
            return (int)comType.InvokeMember("StoreCustomDataFromFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, FileName, Location, Options});
        }

        public int StoreCustomDataFromVariant(string Key, byte[] NewValue, 
            int Location, int Options)
        {
            return (int)comType.InvokeMember("StoreCustomDataFromVariant",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Key, NewValue, Location, Options});
        }

        public int TestTempPath()
        {
            return (int)comType.InvokeMember("TestTempPath",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int TransformFile(string InputFileName, string Password, 
            string OutputFileName, int TransformType, int Options)
        {
            return (int)comType.InvokeMember("TransformFile",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                InputFileName, Password, OutputFileName, TransformType, 
                Options});
        }

        public int UnlockKey(string LicenseKey)
        {
            return (int)comType.InvokeMember("UnlockKey",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                LicenseKey});
        }

        public int Unlocked()
        {
            return (int)comType.InvokeMember("Unlocked",
                BindingFlags.InvokeMethod, null, comObject, new object[] {});
        }

        public int UpdateAndFlattenFormField(int Index)
        {
            return (int)comType.InvokeMember("UpdateAndFlattenFormField",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int UpdateAppearanceStream(int Index)
        {
            return (int)comType.InvokeMember("UpdateAppearanceStream",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Index});
        }

        public int UpdateTrueTypeSubsettedFont(string SubsetChars)
        {
            return (int)comType.InvokeMember("UpdateTrueTypeSubsettedFont",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SubsetChars});
        }

        public int UseKerning(int Kern)
        {
            return (int)comType.InvokeMember("UseKerning",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                Kern});
        }

        public int UseUnsafeContentStreams(int SafetyLevel)
        {
            return (int)comType.InvokeMember("UseUnsafeContentStreams",
                BindingFlags.InvokeMethod, null, comObject, new object[] {
                SafetyLevel});
        }

    }
}
